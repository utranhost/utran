{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Utran\u5feb\u901f\u5165\u95e8","text":""},{"location":"#_1","title":"\u5b89\u88c5","text":"pip\u5b89\u88c5<pre><code>pip install utran\n</code></pre>"},{"location":"#_2","title":"\u670d\u52a1\u5668\u4f7f\u7528","text":"\u670d\u52a1\u7aef\u793a\u4f8b<pre><code>import utran\nfrom utran.server import Server,HttpResponse\nserver = Server()\n@server.register.get('/')\ndef sayhi():\nreturn HttpResponse(text=\"hi,Utran!\",content_type='text/html')\n@server.register.post\n@server.register.rpc\nasync def add(a:int,b:int):\nreturn a+b\nutran.run(server,host='127.0.0.1',port=8081,web_port=8080)\n</code></pre>"},{"location":"#_3","title":"\u3010\u670d\u52a1\u7aef\u3011","text":"<p>\u5305\u542b\u4e86web\u670d\u52a1\u548cRpc\u670d\u52a1\u7aef\uff0c\u652f\u6301 RPC\u3001GET\u3001POST\u3001SUB/PUB</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>\u4e3b\u673a\u5730\u5740</p> required <code>port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <code>severName</code> <code>str</code> <p>\u670d\u52a1\u540d\u79f0</p> <code>'UtranServer'</code> <code>checkParams</code> <code>bool</code> <p>\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362</p> <code>True</code> <code>checkReturn</code> <code>bool</code> <p>\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362</p> <code>True</code> <code>dataMaxsize</code> <code>int</code> <p>\u652f\u6301\u6700\u5927\u6570\u636e\u5b57\u8282\u6570</p> <code>1024 ** 10</code> <code>limitHeartbeatInterval</code> <code>int</code> <p>\u5fc3\u8df3\u68c0\u6d4b\u7684\u6781\u9650\u503c\uff0c\u4e3a\u4e86\u9632\u6b62\u5fc3\u8df3\u653b\u51fb\uff0c\u9ed8\u8ba4\u4e3a1s,\u4e24\u6b21\u5fc3\u8df3\u7684\u95f4\u9694\u5c0f\u4e8e\u8be5\u503c\u5219\u4f1a\u65ad\u5f00\u8fde\u63a5\u3002</p> <code>1</code> Source code in <code>utran\\server\\server.py</code> <pre><code>class Server:\n\"\"\"\u5305\u542b\u4e86web\u670d\u52a1\u548cRpc\u670d\u52a1\u7aef\uff0c\u652f\u6301 RPC\u3001GET\u3001POST\u3001SUB/PUB\n    Args:\n        host (str): \u4e3b\u673a\u5730\u5740\n        port (int): \u7aef\u53e3\u53f7\n        severName (str): \u670d\u52a1\u540d\u79f0\n        checkParams (bool): \u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\n        checkReturn (bool): \u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\n        dataMaxsize (int):  \u652f\u6301\u6700\u5927\u6570\u636e\u5b57\u8282\u6570\n        limitHeartbeatInterval (int): \u5fc3\u8df3\u68c0\u6d4b\u7684\u6781\u9650\u503c\uff0c\u4e3a\u4e86\u9632\u6b62\u5fc3\u8df3\u653b\u51fb\uff0c\u9ed8\u8ba4\u4e3a1s,\u4e24\u6b21\u5fc3\u8df3\u7684\u95f4\u9694\u5c0f\u4e8e\u8be5\u503c\u5219\u4f1a\u65ad\u5f00\u8fde\u63a5\u3002\n    \"\"\"\n__slots__=(\n'_host',\n'_port',\n'_checkParams',\n'_checkReturn',\n'_register',\n'_sub_container',\n'_severName',\n'_dataMaxsize',\n'_dataEncrypt',\n'_limitHeartbeatInterval',\n'_webServer',\n'_rpcServer',\n'__isruning',\n'_workers',\n'_pool')\ndef __init__(\nself,\n*,\ncheckParams:bool = True,\ncheckReturn:bool = True,\nregister: Register = None,\nsub_container: SubscriptionContainer = None,\nseverName: str = 'UtranServer',\ndataMaxsize: int = 1024**10,\nlimitHeartbeatInterval: int = 1,\ndataEncrypt: bool = False,\nworkers:int = 1) -&gt; None:\nself._checkParams = checkParams\nself._checkReturn = checkReturn\nself._workers = workers                             # \u8fdb\u7a0b\u6c60\u6570\u91cf        \nself._register = register or Register(checkParams=checkParams,checkReturn=checkReturn,workers=workers)\nself._sub_container = sub_container or SubscriptionContainer()\nself._severName = severName\nself._dataMaxsize = dataMaxsize        \nself._limitHeartbeatInterval = limitHeartbeatInterval\nself._dataEncrypt = dataEncrypt\nself.__isruning=False\nself._pool = None\nasync def start(self,\nhost: str = '127.0.0.1',\nport:int=8080,\nusername: str = None,\npassword: str = None)-&gt;None:\n\"\"\"\n        # \u8fd0\u884c\u670d\u52a1\n        \u793a\u4f8b:\n            ### server = Server()\n            ### asyncio.run(server.start())\n        \"\"\"\nif self.__isruning: return\nelse: self.__isruning = True\n# \u521b\u5efa\u8fdb\u7a0b\u6c60\nif self._workers&gt;0 and self._pool is None:\nself._pool = ProcessPoolExecutor(self._workers)\nself._host = host\nself._port= port\nself._webServer = WebServer(\nregister= self._register, \nseverName= self._severName,\nsub_container= self._sub_container,\ncheckParams=self._checkParams,\ncheckReturn=self._checkReturn,\ndataMaxsize= self._dataMaxsize, \nlimitHeartbeatInterval= self._limitHeartbeatInterval, \ndataEncrypt= self._dataEncrypt,\nworkers=self._workers,\npool=self._pool)\nawait self._webServer.start(host,port,username=username,password=password)\n@property\ndef register(self)-&gt;Register:\n\"\"\"# \u6ce8\u518c\n        Returns:\n            \u8fd4\u56de\u4e00\u4e2aRegister\u7c7b\u7684\u5b9e\u4f8b\n        \"\"\"\nreturn self._register\nasync def publish(self,id:int,msg:any,*topics:str)-&gt;None:\n\"\"\"\n        # \u7ed9\u6307\u5b9atopic\u63a8\u9001\u6d88\u606f\n        Args:\n            id (int): id\u6807\u8bc6\n            topic (str): \u6307\u5b9a\u8bdd\u9898\n            msg (dict): \u6d88\u606f\n        \"\"\" \nawait process_publish_request(UtRequest(id,requestType=UtType.PUBLISH,topics=topics,msg=msg),self._sub_container)\ndef exit(self):\n\"\"\"\u9000\u51fa\u7a0b\u5e8f\"\"\"\nself._webServer.exit()\n</code></pre>"},{"location":"#utran.server.server.Server.register","title":"<code>register: Register</code>  <code>property</code>","text":""},{"location":"#utran.server.server.Server.register--_1","title":"\u6ce8\u518c","text":"<p>Returns:</p> Type Description <code>Register</code> <p>\u8fd4\u56de\u4e00\u4e2aRegister\u7c7b\u7684\u5b9e\u4f8b</p>"},{"location":"#utran.server.server.Server.exit","title":"<code>exit()</code>","text":"<p>\u9000\u51fa\u7a0b\u5e8f</p> Source code in <code>utran\\server\\server.py</code> <pre><code>def exit(self):\n\"\"\"\u9000\u51fa\u7a0b\u5e8f\"\"\"\nself._webServer.exit()\n</code></pre>"},{"location":"#utran.server.server.Server.publish","title":"<code>publish(id, msg, *topics)</code>  <code>async</code>","text":""},{"location":"#utran.server.server.Server.publish--topic","title":"\u7ed9\u6307\u5b9atopic\u63a8\u9001\u6d88\u606f","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>id\u6807\u8bc6</p> required <code>topic</code> <code>str</code> <p>\u6307\u5b9a\u8bdd\u9898</p> required <code>msg</code> <code>dict</code> <p>\u6d88\u606f</p> required Source code in <code>utran\\server\\server.py</code> <pre><code>async def publish(self,id:int,msg:any,*topics:str)-&gt;None:\n\"\"\"\n    # \u7ed9\u6307\u5b9atopic\u63a8\u9001\u6d88\u606f\n    Args:\n        id (int): id\u6807\u8bc6\n        topic (str): \u6307\u5b9a\u8bdd\u9898\n        msg (dict): \u6d88\u606f\n    \"\"\" \nawait process_publish_request(UtRequest(id,requestType=UtType.PUBLISH,topics=topics,msg=msg),self._sub_container)\n</code></pre>"},{"location":"#utran.server.server.Server.start","title":"<code>start(host='127.0.0.1', port=8080, username=None, password=None)</code>  <code>async</code>","text":""},{"location":"#utran.server.server.Server.start--_1","title":"\u8fd0\u884c\u670d\u52a1","text":"\u793a\u4f8b Source code in <code>utran\\server\\server.py</code> <pre><code>async def start(self,\nhost: str = '127.0.0.1',\nport:int=8080,\nusername: str = None,\npassword: str = None)-&gt;None:\n\"\"\"\n    # \u8fd0\u884c\u670d\u52a1\n    \u793a\u4f8b:\n        ### server = Server()\n        ### asyncio.run(server.start())\n    \"\"\"\nif self.__isruning: return\nelse: self.__isruning = True\n# \u521b\u5efa\u8fdb\u7a0b\u6c60\nif self._workers&gt;0 and self._pool is None:\nself._pool = ProcessPoolExecutor(self._workers)\nself._host = host\nself._port= port\nself._webServer = WebServer(\nregister= self._register, \nseverName= self._severName,\nsub_container= self._sub_container,\ncheckParams=self._checkParams,\ncheckReturn=self._checkReturn,\ndataMaxsize= self._dataMaxsize, \nlimitHeartbeatInterval= self._limitHeartbeatInterval, \ndataEncrypt= self._dataEncrypt,\nworkers=self._workers,\npool=self._pool)\nawait self._webServer.start(host,port,username=username,password=password)\n</code></pre>"},{"location":"#utran.server.server.Server.start--server-server","title":"server = Server()","text":""},{"location":"#utran.server.server.Server.start--asynciorunserverstart","title":"asyncio.run(server.start())","text":""},{"location":"#_4","title":"\u3010\u5ba2\u6237\u7aef\u3011","text":""},{"location":"#utran.Client--_1","title":"\u5ba2\u6237\u7aef","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>\u670d\u52a1\u5668\u5730\u5740</p> <code>'ws://localhost:8080'</code> <code>maxReconnectNum</code> <code>int</code> <p>\u65ad\u7ebf\u540e\u6700\u5927\u91cd\u8fde\u6b21\u6570</p> <code>10</code> <code>ignore</code> <code>bool</code> <p>\u5168\u5c40\u8bbe\u7f6e\uff0c\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>True</code> <code>compress</code> <code>int</code> <p>\u662f\u5426\u538b\u7f29\u6570\u636e</p> <code>0</code> <code>max_msg_size</code> <code>int</code> <p>\u8868\u793a\u63a5\u6536\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u63a5\u6536\u5230\u7684\u6d88\u606f\u5927\u5c0f\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002</p> <code>4 * 1024 * 1024</code> <code>username</code> <code>str</code> <p>\u7528\u6237\u540d</p> <code>None</code> <code>password</code> <code>str</code> <p>\u5bc6\u7801</p> <code>None</code> <code>loop</code> <code>asyncio.AbstractEventLoop</code> <p>\u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af</p> <code>None</code> Source code in <code>utran\\client\\client.py</code> <pre><code>class Client:\n\"\"\"# \u5ba2\u6237\u7aef\n    Args:\n        url: \u670d\u52a1\u5668\u5730\u5740\n        maxReconnectNum: \u65ad\u7ebf\u540e\u6700\u5927\u91cd\u8fde\u6b21\u6570\n        ignore: \u5168\u5c40\u8bbe\u7f6e\uff0c\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        compress: \u662f\u5426\u538b\u7f29\u6570\u636e\n        max_msg_size: \u8868\u793a\u63a5\u6536\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u63a5\u6536\u5230\u7684\u6d88\u606f\u5927\u5c0f\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\n        username: \u7528\u6237\u540d\n        password: \u5bc6\u7801\n        loop: \u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af\n    \"\"\"\n__slots__ = ('_loop','_thread','_bsclient','_is_loop_autogen')\ndef __init__(self, \nurl: str = 'ws://localhost:8080', \nmaxReconnectNum: int = 10, \nignore: bool = True, \ncompress: int = 0, \nmax_msg_size: int = 4 * 1024 * 1024, \nusername: str = None, \npassword: str = None,\nloop:asyncio.AbstractEventLoop = None) -&gt; None:\nself._bsclient = BaseClient(url, maxReconnectNum, ignore, compress, max_msg_size, username, password)\nself._loop:asyncio.AbstractEventLoop = loop\nself._is_loop_autogen = False\ndef __call__(self, *args: any,\nurl:str=None,\nusername:str=None,\npassword:str=None,\nloop:asyncio.AbstractEventLoop = None) -&gt; callable:\n\"\"\"\u6307\u5b9a\u5165\u53e3\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6307\u5b9a\u5165\u53e3\u51fd\u6570\"\"\"\nif len(args)==0:\nreturn partial(self.__call__,url=url,username=username,password=password,loop=loop)\nmain=args[0]        \nloop = loop or self._get_event_loop()\nif inspect.iscoroutinefunction(main):            \ntry:\nasync def run():                    \nawait self._bsclient.start(url=url,username=username,password=password)\nif inspect.signature(main).parameters.values():\nawait main(self)\nelse:\nawait main()\nawait self._bsclient.__aexit__()\nloop.run_until_complete(run())\nfinally:\nif self._is_loop_autogen:\nloop.stop()\nloop.close()\nelif inspect.isfunction(main) or inspect.ismethod(main):            \ntry:\nself.start(url=url,username=username,password=password,loop=loop)\nif inspect.signature(main).parameters.values():\nmain(self)\nelse:\nmain()\nfinally:\nself.__exit__()\nreturn main\ndef start(self,url:str=None,username:str=None,password:str=None,loop:asyncio.AbstractEventLoop = None):\n\"\"\"# \u542f\u52a8\u8fde\u63a5\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:            \n            main:\u5165\u53e3\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u534f\u7a0b\u51fd\u6570\u3001\u534f\u7a0b\u5bf9\u8c61\u6216Future\u5bf9\u8c61\u3002\u4e3a\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a\n            uri: \u670d\u52a1\u5668\u5730\u5740 \u4f8b\uff1a`utran://127.0.0.1:8081`\n            host: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n            port: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n            runforever: \u662f\u5426\u4e00\u76f4\u8fd0\u884c,\u9ed8\u8ba4\u5165\u53e3\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e14\u65e0\u4efb\u4f55\u8ba2\u9605\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa\n        \"\"\"\nself._loop = loop or self._get_event_loop()\ncoro = self._bsclient.start(url=url,username=username,password=password)\nif self._loop==None:\nreturn coro\ndef worker():\nlogger.debug(\"ws\u7ebf\u7a0b\u8fd0\u884c\")\nasync def waitExit():\nawait self._bsclient._exitEvent.wait()\nself._loop.run_until_complete(coro)\nself._loop.run_until_complete(waitExit())\nlogger.debug(\"ws\u7ebf\u7a0b\u9000\u51fa\")\nself._thread = threading.Thread(target=worker)\nself._thread.start()\nwhile True:\nif self._bsclient._isclosed==0: # \u7b49\u5f85\u8fde\u63a5\u6210\u529f\nbreak\ntime.sleep(0.5)\ndef subscribe(self,\ntopic:Union[str,tuple[str]],\ncallback:callable,\n*,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u8ba2\u9605\u8bdd\u9898\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:\n            topic: \u8bdd\u9898\n            callback: \u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, \n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        Returns:\n            {'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}\n        |allTopics|subTopics|\n        |---------|-----------|\n        |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"subscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.subscribe(topic=topic,callback=callback,timeout=timeout,ignore=ignore)\nif self._loop:\nreturn self._use_sync(coro)\nelse:\nreturn coro\ndef unsubscribe(self,\n*topic:str,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:\n            topic: \u8bdd\u9898\n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        Returns:\n            {'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   \n        |allTopics|unSubTopics|\n        |---------|-----------|\n        |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n        \"\"\"\nif not self._has_start(): \nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"unsubscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.unsubscribe(*topic,timeout=timeout,ignore=ignore)\nif self._loop:            \nreturn self._use_sync(coro)\nelse:\nreturn coro\ndef multicall(self,*calls:Coroutine,ignore:bool=None,retransmitFull:bool=False)-&gt;Union[list,Coroutine]:\n\"\"\"# \u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n                \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002\n                \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002\n        Args:\n            *calls: \u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n            retransmitFull: \u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42\n        Returns:\n            \u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"multicall\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.multicall(*calls,ignore=ignore,retransmitFull=retransmitFull)\nif self._loop:\n# with\u5173\u952e\u5b57\u8c03\u7528\u3001\u540c\u6b65\u6307\u5b9a\u5165\u53e3\nreturn self._use_sync(coro)\nelse:\n# \u5f02\u6b65\u6307\u5b9a\u5165\u53e3\nreturn coro\ndef _get_event_loop(self):\n\"\"\"# \u83b7\u53d6\u53ef\u7528\u7684\u4e8b\u4ef6\u5faa\u73af\n        Returns:\n            1.\u5f53\u524d\u5b58\u5728\u6ca1\u6709\u88ab\u5173\u95ed\u7684loop\uff0c\u5219\u8fd4\u56de\u8be5loop\uff0c\u5f53\u7a0b\u5e8f\u9000\u51fa\u65f6\u4e0d\u4f1a\u5173\u95ed\u8be5loop\n            2.\u5426\u8005\u751f\u6210\u65b0\u7684loop\u5e76\u6807\u8bb0\u672a\u81ea\u52a8\u751f\u6210\u7684\uff0c\u5f53\u9000\u51fa\u7a0b\u5e8f\u65f6\u4f1a\u81ea\u52a8\u5173\u95ed\u8be5loop\n        \"\"\"\nif self._loop and not self._loop.is_closed():\nreturn self._loop\nelse:\nself._is_loop_autogen = True\nreturn asyncio.new_event_loop()\ndef _has_start(self):\n\"\"\"# \u662f\u5426\u8c03\u7528\u4e86start\n        \u672a\u8fd0\u884cstart\u65f6\uff0c\u8fdb\u884c\u81ea\u542f\u52a8,\u5f53\u6267\u884cexit\u8fc7\u540e\uff0c\u4e0d\u4f1a\u81ea\u52a8\n        \"\"\"\nif self._bsclient._isclosed == -1:\nlogger.debug('\u81ea\u542f\u52a8..')\nself.start(loop=self._get_event_loop())            \nelif self._bsclient._isclosed == 1:             \nreturn False        \nreturn True\ndef _use_sync(self,coro:Coroutine):\nfutrue = asyncio.run_coroutine_threadsafe(coro,self._loop)\nreturn futrue.result()\ndef exit(self):\n\"\"\"# \u9000\u51fa\u7a0b\u5e8f\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.exit()\nif self._loop:            \nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nelse:\nreturn coro\ndef without_sub_exit(self):\n\"\"\"\u65e0\u8ba2\u9605\u65f6\u9000\u51fa\"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"without_sub_exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.__aexit__(None,None,None)\nif self._loop:\ntry:\nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nexcept Exception as e:\nlogger.warning(e)\nelse:\nreturn coro\n@property\ndef call(self)-&gt;AccessProxy:\n\"\"\"\u8fdc\u7a0b\u8c03\u7528\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n                \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002\n                \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002\n        Returns:\n            \u8fd4\u56de\u8fdc\u7a0b\u8c03\u7528\u7684\u4ee3\u7406\u7c7b\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"call\"\u65b9\u6cd5')\nreturn\nreturn AccessProxy(self)\n@property\ndef _base_call(self):\nreturn self._bsclient.call\ndef __enter__(self):\nself._loop = self._get_event_loop()\nself.start()\nreturn self\ndef __exit__(self, exc_type=None, exc_value=None, traceback=None):\ntry:\nif exc_type:\nraise exc_type(exc_value)\nif self._loop:\nself.without_sub_exit()\nreturn\nexcept:\nif self._loop:\nself.exit()\nasync def __aenter__(self):\nawait self._bsclient.__aenter__()\nreturn self\nasync def __aexit__(self, exc_type, exc_val, exc_tb):\nawait self._bsclient.__aexit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"#utran.client.client.Client.call","title":"<code>call: AccessProxy</code>  <code>property</code>","text":"<p>\u8fdc\u7a0b\u8c03\u7528 \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c         \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002         \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002</p> <p>Returns:</p> Type Description <code>AccessProxy</code> <p>\u8fd4\u56de\u8fdc\u7a0b\u8c03\u7528\u7684\u4ee3\u7406\u7c7b</p>"},{"location":"#utran.client.client.Client.__call__","title":"<code>__call__(*args, url=None, username=None, password=None, loop=None)</code>","text":"<p>\u6307\u5b9a\u5165\u53e3\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6307\u5b9a\u5165\u53e3\u51fd\u6570</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def __call__(self, *args: any,\nurl:str=None,\nusername:str=None,\npassword:str=None,\nloop:asyncio.AbstractEventLoop = None) -&gt; callable:\n\"\"\"\u6307\u5b9a\u5165\u53e3\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6307\u5b9a\u5165\u53e3\u51fd\u6570\"\"\"\nif len(args)==0:\nreturn partial(self.__call__,url=url,username=username,password=password,loop=loop)\nmain=args[0]        \nloop = loop or self._get_event_loop()\nif inspect.iscoroutinefunction(main):            \ntry:\nasync def run():                    \nawait self._bsclient.start(url=url,username=username,password=password)\nif inspect.signature(main).parameters.values():\nawait main(self)\nelse:\nawait main()\nawait self._bsclient.__aexit__()\nloop.run_until_complete(run())\nfinally:\nif self._is_loop_autogen:\nloop.stop()\nloop.close()\nelif inspect.isfunction(main) or inspect.ismethod(main):            \ntry:\nself.start(url=url,username=username,password=password,loop=loop)\nif inspect.signature(main).parameters.values():\nmain(self)\nelse:\nmain()\nfinally:\nself.__exit__()\nreturn main\n</code></pre>"},{"location":"#utran.client.client.Client.exit","title":"<code>exit()</code>","text":""},{"location":"#utran.client.client.Client.exit--_1","title":"\u9000\u51fa\u7a0b\u5e8f","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def exit(self):\n\"\"\"# \u9000\u51fa\u7a0b\u5e8f\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n    \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.exit()\nif self._loop:            \nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nelse:\nreturn coro\n</code></pre>"},{"location":"#utran.client.client.Client.multicall","title":"<code>multicall(*calls, ignore=None, retransmitFull=False)</code>","text":""},{"location":"#utran.client.client.Client.multicall--_1","title":"\u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c         \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002         \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002</p> <p>Parameters:</p> Name Type Description Default <code>*calls</code> <code>Coroutine</code> <p>\u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61</p> <code>()</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <code>retransmitFull</code> <code>bool</code> <p>\u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[list, Coroutine]</code> <p>\u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def multicall(self,*calls:Coroutine,ignore:bool=None,retransmitFull:bool=False)-&gt;Union[list,Coroutine]:\n\"\"\"# \u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n            \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002\n            \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002\n    Args:\n        *calls: \u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        retransmitFull: \u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42\n    Returns:\n        \u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de\n    \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"multicall\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.multicall(*calls,ignore=ignore,retransmitFull=retransmitFull)\nif self._loop:\n# with\u5173\u952e\u5b57\u8c03\u7528\u3001\u540c\u6b65\u6307\u5b9a\u5165\u53e3\nreturn self._use_sync(coro)\nelse:\n# \u5f02\u6b65\u6307\u5b9a\u5165\u53e3\nreturn coro\n</code></pre>"},{"location":"#utran.client.client.Client.start","title":"<code>start(url=None, username=None, password=None, loop=None)</code>","text":""},{"location":"#utran.client.client.Client.start--_1","title":"\u542f\u52a8\u8fde\u63a5","text":"<p>\u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa Args:               main:\u5165\u53e3\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u534f\u7a0b\u51fd\u6570\u3001\u534f\u7a0b\u5bf9\u8c61\u6216Future\u5bf9\u8c61\u3002\u4e3a\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a     uri: \u670d\u52a1\u5668\u5730\u5740 \u4f8b\uff1a<code>utran://127.0.0.1:8081</code>     host: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport     port: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport     runforever: \u662f\u5426\u4e00\u76f4\u8fd0\u884c,\u9ed8\u8ba4\u5165\u53e3\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e14\u65e0\u4efb\u4f55\u8ba2\u9605\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def start(self,url:str=None,username:str=None,password:str=None,loop:asyncio.AbstractEventLoop = None):\n\"\"\"# \u542f\u52a8\u8fde\u63a5\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:            \n        main:\u5165\u53e3\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u534f\u7a0b\u51fd\u6570\u3001\u534f\u7a0b\u5bf9\u8c61\u6216Future\u5bf9\u8c61\u3002\u4e3a\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a\n        uri: \u670d\u52a1\u5668\u5730\u5740 \u4f8b\uff1a`utran://127.0.0.1:8081`\n        host: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n        port: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n        runforever: \u662f\u5426\u4e00\u76f4\u8fd0\u884c,\u9ed8\u8ba4\u5165\u53e3\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e14\u65e0\u4efb\u4f55\u8ba2\u9605\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa\n    \"\"\"\nself._loop = loop or self._get_event_loop()\ncoro = self._bsclient.start(url=url,username=username,password=password)\nif self._loop==None:\nreturn coro\ndef worker():\nlogger.debug(\"ws\u7ebf\u7a0b\u8fd0\u884c\")\nasync def waitExit():\nawait self._bsclient._exitEvent.wait()\nself._loop.run_until_complete(coro)\nself._loop.run_until_complete(waitExit())\nlogger.debug(\"ws\u7ebf\u7a0b\u9000\u51fa\")\nself._thread = threading.Thread(target=worker)\nself._thread.start()\nwhile True:\nif self._bsclient._isclosed==0: # \u7b49\u5f85\u8fde\u63a5\u6210\u529f\nbreak\ntime.sleep(0.5)\n</code></pre>"},{"location":"#utran.client.client.Client.subscribe","title":"<code>subscribe(topic, callback, *, timeout=None, ignore=None)</code>","text":""},{"location":"#utran.client.client.Client.subscribe--_1","title":"\u8ba2\u9605\u8bdd\u9898","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Union[str, tuple[str]]</code> <p>\u8bdd\u9898</p> required <code>callback</code> <code>callable</code> <p>\u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, </p> required <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Coroutine, dict]</code> <p>{'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}</p> allTopics subTopics \u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> \u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> Source code in <code>utran\\client\\client.py</code> <pre><code>def subscribe(self,\ntopic:Union[str,tuple[str]],\ncallback:callable,\n*,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u8ba2\u9605\u8bdd\u9898\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:\n        topic: \u8bdd\u9898\n        callback: \u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, \n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n    Returns:\n        {'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}\n    |allTopics|subTopics|\n    |---------|-----------|\n    |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n    \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"subscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.subscribe(topic=topic,callback=callback,timeout=timeout,ignore=ignore)\nif self._loop:\nreturn self._use_sync(coro)\nelse:\nreturn coro\n</code></pre>"},{"location":"#utran.client.client.Client.unsubscribe","title":"<code>unsubscribe(*topic, timeout=None, ignore=None)</code>","text":""},{"location":"#utran.client.client.Client.unsubscribe--_1","title":"\u53d6\u6d88\u8ba2\u9605\u8bdd\u9898","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>str</code> <p>\u8bdd\u9898</p> <code>()</code> <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Coroutine, dict]</code> <p>{'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   </p> allTopics unSubTopics \u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> \u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> Source code in <code>utran\\client\\client.py</code> <pre><code>def unsubscribe(self,\n*topic:str,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:\n        topic: \u8bdd\u9898\n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n    Returns:\n        {'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   \n    |allTopics|unSubTopics|\n    |---------|-----------|\n    |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n    \"\"\"\nif not self._has_start(): \nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"unsubscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.unsubscribe(*topic,timeout=timeout,ignore=ignore)\nif self._loop:            \nreturn self._use_sync(coro)\nelse:\nreturn coro\n</code></pre>"},{"location":"#utran.client.client.Client.without_sub_exit","title":"<code>without_sub_exit()</code>","text":"<p>\u65e0\u8ba2\u9605\u65f6\u9000\u51fa</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def without_sub_exit(self):\n\"\"\"\u65e0\u8ba2\u9605\u65f6\u9000\u51fa\"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"without_sub_exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.__aexit__(None,None,None)\nif self._loop:\ntry:\nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nexcept Exception as e:\nlogger.warning(e)\nelse:\nreturn coro\n</code></pre>"},{"location":"#_5","title":"\u3010\u8fd0\u884c\u5668\u3011","text":""},{"location":"#utran.run--_1","title":"\u901a\u7528\u7684\u8fd0\u884c\u5668","text":"<p>Parameters:</p> Name Type Description Default <code>app</code> <code>Union[Server, WebServer, BaseClient, Client]</code> <p>\u9700\u8981\u8fd0\u884c\u7684\u670d\u52a1</p> required <code>host</code> <code>str</code> <p>\u4e3b\u673a</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>RPC\u7aef\u53e3</p> <code>8080</code> <code>web_port</code> <p>WEB\u7aef\u53e3</p> required <code>url</code> <code>str</code> <p>\u8fdc\u7a0b\u670d\u52a1\u5730\u5740    </p> <code>None</code> <code>loop</code> <code>asyncio.AbstractEventLoop</code> <p>\u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af</p> <code>None</code> Source code in <code>utran\\runner.py</code> <pre><code>def run(app:Union[Server,WebServer,BaseClient,Client],\n*,\nhost:str='127.0.0.1',\nport:int=8080,\nurl:str=None,\nentry:callable=None,\nloop:asyncio.AbstractEventLoop=None,\nusername: str = None,\npassword: str = None):\n\"\"\"# \u901a\u7528\u7684\u8fd0\u884c\u5668\n    Args:\n        app: \u9700\u8981\u8fd0\u884c\u7684\u670d\u52a1\n        host: \u4e3b\u673a\n        port: RPC\u7aef\u53e3\n        web_port: WEB\u7aef\u53e3\n        url: \u8fdc\u7a0b\u670d\u52a1\u5730\u5740    \n        loop: \u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af\n    \"\"\"\nif isinstance(app,Server):        \ncoro= app.start(host=host,\nport=port,\nusername=username,\npassword=password)\nif loop:\nloop.run_until_complete(coro)\nelse:\nasyncio.run(coro)\nif isinstance(app,WebServer):\ncoro= app.start(host=host,\nport=port,\nusername=username,\npassword=password)\nif loop:\nloop.run_until_complete(coro)\nelse:\nasyncio.run(coro)\nif isinstance(app,Client):\nif callable(entry):\napp(entry,url=url,username=username,password=password,loop=loop)\nelse:\nraise RuntimeError('Run Error,\u672a\u6307\u5b9a\u6709\u6548\u7684entry')\n</code></pre>"},{"location":"api/application/","title":"APP\u5e94\u7528","text":""},{"location":"api/client/","title":"\u5ba2\u6237\u7aef","text":""},{"location":"api/client/#_2","title":"\u3010\u5ba2\u6237\u7aef\u3011","text":"<p>\u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\u5c06\u670d\u52a1\u542f\u52a8\u5230\u4e00\u4e2a\u5b50\u7ebf\u7a0b\u4e2d\u3002\u5f02\u6b65\u8c03\u7528\u4e0d\u4f1a\u4f7f\u7528\u5b50\u7ebf\u7a0b\u6765\u8fd0\u884c\u670d\u52a1</p>"},{"location":"api/client/#1","title":"\u793a\u4f8b1 \uff08\u540c\u6b65\u8c03\u7528\uff09","text":"<p>\u8fd9\u79cd\u8c03\u7528\u65b9\u5f0f\u65e0\u8bba\u662f\u5426\u6709\u8ba2\u9605\uff0c\u90fd\u9700\u8981\u624b\u52a8\u8c03\u7528exit\u65b9\u6cd5\u9000\u51fa \u4f7f\u7528\u793a\u4f8b3<pre><code>import utran\nfrom utran.client.client import Client\nclient = Client()\n# client.start()  # \u4e0d\u8c03\u7528start\u65b9\u6cd5\u65f6\uff0c\u4f1a\u81ea\u542f\u52a8\nres = client.subscribe('good',lambda x,y:print(x,y))\nprint(res)\nres= client.multicall(*[client.call(multicall=True).add(1,i) for i in range(0,20)],retransmitFull=False)        \nprint(res)\nres = client.unsubscribe('good')\nprint(res)\nclient.exit()  # \u65e0\u8bba\u662f\u5426\u6709\u8ba2\u9605\uff0c\u90fd\u9700\u8981\u624b\u52a8\u9000\u51fa\n</code></pre></p>"},{"location":"api/client/#_3","title":"\u88c5\u9970\u5668\u7528\u6cd5","text":"<p>\u88c5\u9970\u5668\u7528\u6cd5\uff0c\u5728main\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5982\u679c\u6709\u8ba2\u9605\u7684\u4f1a\u81ea\u52a8\u7b49\u5f85\u63a8\u9001\uff0c\u8ba2\u9605\u4e3a\u7a7a\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa</p>"},{"location":"api/client/#1_1","title":"\u793a\u4f8b1\uff08\u540c\u6b65\u8c03\u7528\uff09","text":"\u4f7f\u7528\u793a\u4f8b1<pre><code>import utran\nfrom utran.client.client import Client\nclient = Client(url='ws://127.0.0.1:8080')\n@client\ndef main():\nres = client.subscribe('good',lambda x,y:print(x,y))\nprint(res)\nres = client.call.myclass.add(1,2)\nprint(res)\nres= client.multicall(*[client.call(multicall=True).add(1,i) for i in range(0,20)],retransmitFull=False)        \nprint(res)\nclient.unsubscribe('good')\n</code></pre>"},{"location":"api/client/#2","title":"\u793a\u4f8b2 \uff08\u5f02\u6b65\u8c03\u7528\uff09","text":"\u4f7f\u7528\u793a\u4f8b2<pre><code>import utran\nfrom utran.client.client import Client\nclient = Client(url='ws://127.0.0.1:8080')\n@client\nasync def main():\nres = await client.call.add(1,2) # \u65e0\u9009\u9879\u8c03\u7528\nprint(res)\nres = await client.call(timeout=1).add(1,2)  # \u6709\u9009\u9879\u8c03\u7528\nprint(res)\nres:list = await client.multicall(client.call(multicall=True).add(1,2),\nclient.call(multicall=True).add(2,2),\nignore=True)\nprint(res)\n</code></pre>"},{"location":"api/client/#with","title":"\u4f7f\u7528with\u5173\u952e \uff08\u540c\u6b65\u8c03\u7528\uff09","text":"<p>\u4f7f\u7528\u903b\u8f91\u4e0e\u6307\u5b9a\u5165\u53e3\u7684\u65b9\u5f0f\u4e00\u81f4</p>"},{"location":"api/client/#1_2","title":"\u793a\u4f8b1\uff08\u540c\u6b65\u8c03\u7528\uff09","text":"\u4f7f\u7528\u793a\u4f8b2<pre><code>import utran\nfrom utran.client.client import Client\nwith Client(url='ws://127.0.0.1:8080') as client:\nres = client.subscribe(['good','study'],lambda msg,topic:print(msg,topic))\nprint(res)\nres = client.call.add0(6,5)\nprint(res)\nres = client.call.add0(1,2)\nprint(res)\nres = client.unsubscribe(*['good','study'])\nprint(res)\n</code></pre>"},{"location":"api/client/#2_1","title":"\u793a\u4f8b2 \uff08\u5f02\u6b65\u8c03\u7528\uff09","text":"\u4f7f\u7528\u793a\u4f8b2<pre><code>import utran\nfrom utran.client.client import Client\nasync def main():\nasync with Client() as client:\nres = await client.subscribe('good',lambda x,y:print(x,y))\nres= await client.multicall(*[client.call(multicall=True).add(1,i) for i in range(0,100)],retransmitFull=False)\nprint(res)\n# time.sleep(1)\n# await client.exit()\nres = await client.unsubscribe('good')\nasyncio.run(main())\n</code></pre>"},{"location":"api/client/#run","title":"run\u7528\u6cd5\uff0c\u6307\u5b9a\u5165\u53e3","text":"\u4f7f\u7528\u793a\u4f8b2<pre><code>from utran.client.client import Client\n# async call\nasync def main(client:Client):\nres = await client.call.myclass.add(1,2)\nprint(res)\nutran.run(Client(),entry=main)\nprint('\\n',\"--\"*50)\n# sync call\ndef main(client:Client):\nres = client.call.myclass.add(1,2)\nprint(res)\nutran.run(Client(),entry=main,url='ws://127.0.0.1:8080')\n</code></pre>"},{"location":"api/client/#utran.client.client.AccessProxy","title":"<code>AccessProxy</code>","text":"<p>\u8bbf\u95ee\u4ee3\u7406</p> Source code in <code>utran\\client\\client.py</code> <pre><code>class AccessProxy:\n\"\"\"\u8bbf\u95ee\u4ee3\u7406\"\"\"\n__slots__ = ('_temp_opts_','_temp_name_','_client_','_exeProxy_')\ndef __init__(self,client:'Client'):\nself._temp_opts_ = dict()\nself._temp_name_:str = ''\nself._client_ = client\nself._exeProxy_ = ExeProxy(self)\ndef __getattr__(self, methodName):\nself._temp_name_ = methodName\nreturn self._exeProxy_\ndef __call__(self,*,timeout:int=None,ignore:bool=None,multicall:bool=False):\n\"\"\"# \u8bbe\u7f6e\u8c03\u7528\u9009\u9879\n        Args:\n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \uff0c\u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c\n            encrypt: \u662f\u5426\u52a0\u5bc6\uff0c \u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\uff0c\u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c\n            multicall: \u662f\u5426\u6807\u8bb0\u4e3a\u5408\u5e76\u8c03\u7528\n        \"\"\"\nself._temp_opts_ = dict(timeout= timeout,\nignore = self._client_._bsclient._ignore if ignore==None else ignore,\nmulticall = multicall)\nreturn self\n</code></pre>"},{"location":"api/client/#utran.client.client.AccessProxy.__call__","title":"<code>__call__(*, timeout=None, ignore=None, multicall=False)</code>","text":""},{"location":"api/client/#utran.client.client.AccessProxy.__call__--_1","title":"\u8bbe\u7f6e\u8c03\u7528\u9009\u9879","text":"<p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \uff0c\u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c</p> <code>None</code> <code>encrypt</code> <p>\u662f\u5426\u52a0\u5bc6\uff0c \u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c</p> required <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\uff0c\u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c</p> <code>None</code> <code>multicall</code> <code>bool</code> <p>\u662f\u5426\u6807\u8bb0\u4e3a\u5408\u5e76\u8c03\u7528</p> <code>False</code> Source code in <code>utran\\client\\client.py</code> <pre><code>def __call__(self,*,timeout:int=None,ignore:bool=None,multicall:bool=False):\n\"\"\"# \u8bbe\u7f6e\u8c03\u7528\u9009\u9879\n    Args:\n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \uff0c\u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c\n        encrypt: \u662f\u5426\u52a0\u5bc6\uff0c \u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\uff0c\u9ed8\u8ba4\u4e3a\u4e3aclient\u5b9e\u4f8b\u5316\u7684\u503c\n        multicall: \u662f\u5426\u6807\u8bb0\u4e3a\u5408\u5e76\u8c03\u7528\n    \"\"\"\nself._temp_opts_ = dict(timeout= timeout,\nignore = self._client_._bsclient._ignore if ignore==None else ignore,\nmulticall = multicall)\nreturn self\n</code></pre>"},{"location":"api/client/#utran.client.client.Client","title":"<code>Client</code>","text":""},{"location":"api/client/#utran.client.client.Client--_1","title":"\u5ba2\u6237\u7aef","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>\u670d\u52a1\u5668\u5730\u5740</p> <code>'ws://localhost:8080'</code> <code>maxReconnectNum</code> <code>int</code> <p>\u65ad\u7ebf\u540e\u6700\u5927\u91cd\u8fde\u6b21\u6570</p> <code>10</code> <code>ignore</code> <code>bool</code> <p>\u5168\u5c40\u8bbe\u7f6e\uff0c\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>True</code> <code>compress</code> <code>int</code> <p>\u662f\u5426\u538b\u7f29\u6570\u636e</p> <code>0</code> <code>max_msg_size</code> <code>int</code> <p>\u8868\u793a\u63a5\u6536\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u63a5\u6536\u5230\u7684\u6d88\u606f\u5927\u5c0f\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002</p> <code>4 * 1024 * 1024</code> <code>username</code> <code>str</code> <p>\u7528\u6237\u540d</p> <code>None</code> <code>password</code> <code>str</code> <p>\u5bc6\u7801</p> <code>None</code> <code>loop</code> <code>asyncio.AbstractEventLoop</code> <p>\u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af</p> <code>None</code> Source code in <code>utran\\client\\client.py</code> <pre><code>class Client:\n\"\"\"# \u5ba2\u6237\u7aef\n    Args:\n        url: \u670d\u52a1\u5668\u5730\u5740\n        maxReconnectNum: \u65ad\u7ebf\u540e\u6700\u5927\u91cd\u8fde\u6b21\u6570\n        ignore: \u5168\u5c40\u8bbe\u7f6e\uff0c\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        compress: \u662f\u5426\u538b\u7f29\u6570\u636e\n        max_msg_size: \u8868\u793a\u63a5\u6536\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u63a5\u6536\u5230\u7684\u6d88\u606f\u5927\u5c0f\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\n        username: \u7528\u6237\u540d\n        password: \u5bc6\u7801\n        loop: \u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af\n    \"\"\"\n__slots__ = ('_loop','_thread','_bsclient','_is_loop_autogen')\ndef __init__(self, \nurl: str = 'ws://localhost:8080', \nmaxReconnectNum: int = 10, \nignore: bool = True, \ncompress: int = 0, \nmax_msg_size: int = 4 * 1024 * 1024, \nusername: str = None, \npassword: str = None,\nloop:asyncio.AbstractEventLoop = None) -&gt; None:\nself._bsclient = BaseClient(url, maxReconnectNum, ignore, compress, max_msg_size, username, password)\nself._loop:asyncio.AbstractEventLoop = loop\nself._is_loop_autogen = False\ndef __call__(self, *args: any,\nurl:str=None,\nusername:str=None,\npassword:str=None,\nloop:asyncio.AbstractEventLoop = None) -&gt; callable:\n\"\"\"\u6307\u5b9a\u5165\u53e3\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6307\u5b9a\u5165\u53e3\u51fd\u6570\"\"\"\nif len(args)==0:\nreturn partial(self.__call__,url=url,username=username,password=password,loop=loop)\nmain=args[0]        \nloop = loop or self._get_event_loop()\nif inspect.iscoroutinefunction(main):            \ntry:\nasync def run():                    \nawait self._bsclient.start(url=url,username=username,password=password)\nif inspect.signature(main).parameters.values():\nawait main(self)\nelse:\nawait main()\nawait self._bsclient.__aexit__()\nloop.run_until_complete(run())\nfinally:\nif self._is_loop_autogen:\nloop.stop()\nloop.close()\nelif inspect.isfunction(main) or inspect.ismethod(main):            \ntry:\nself.start(url=url,username=username,password=password,loop=loop)\nif inspect.signature(main).parameters.values():\nmain(self)\nelse:\nmain()\nfinally:\nself.__exit__()\nreturn main\ndef start(self,url:str=None,username:str=None,password:str=None,loop:asyncio.AbstractEventLoop = None):\n\"\"\"# \u542f\u52a8\u8fde\u63a5\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:            \n            main:\u5165\u53e3\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u534f\u7a0b\u51fd\u6570\u3001\u534f\u7a0b\u5bf9\u8c61\u6216Future\u5bf9\u8c61\u3002\u4e3a\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a\n            uri: \u670d\u52a1\u5668\u5730\u5740 \u4f8b\uff1a`utran://127.0.0.1:8081`\n            host: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n            port: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n            runforever: \u662f\u5426\u4e00\u76f4\u8fd0\u884c,\u9ed8\u8ba4\u5165\u53e3\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e14\u65e0\u4efb\u4f55\u8ba2\u9605\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa\n        \"\"\"\nself._loop = loop or self._get_event_loop()\ncoro = self._bsclient.start(url=url,username=username,password=password)\nif self._loop==None:\nreturn coro\ndef worker():\nlogger.debug(\"ws\u7ebf\u7a0b\u8fd0\u884c\")\nasync def waitExit():\nawait self._bsclient._exitEvent.wait()\nself._loop.run_until_complete(coro)\nself._loop.run_until_complete(waitExit())\nlogger.debug(\"ws\u7ebf\u7a0b\u9000\u51fa\")\nself._thread = threading.Thread(target=worker)\nself._thread.start()\nwhile True:\nif self._bsclient._isclosed==0: # \u7b49\u5f85\u8fde\u63a5\u6210\u529f\nbreak\ntime.sleep(0.5)\ndef subscribe(self,\ntopic:Union[str,tuple[str]],\ncallback:callable,\n*,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u8ba2\u9605\u8bdd\u9898\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:\n            topic: \u8bdd\u9898\n            callback: \u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, \n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        Returns:\n            {'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}\n        |allTopics|subTopics|\n        |---------|-----------|\n        |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"subscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.subscribe(topic=topic,callback=callback,timeout=timeout,ignore=ignore)\nif self._loop:\nreturn self._use_sync(coro)\nelse:\nreturn coro\ndef unsubscribe(self,\n*topic:str,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:\n            topic: \u8bdd\u9898\n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        Returns:\n            {'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   \n        |allTopics|unSubTopics|\n        |---------|-----------|\n        |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n        \"\"\"\nif not self._has_start(): \nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"unsubscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.unsubscribe(*topic,timeout=timeout,ignore=ignore)\nif self._loop:            \nreturn self._use_sync(coro)\nelse:\nreturn coro\ndef multicall(self,*calls:Coroutine,ignore:bool=None,retransmitFull:bool=False)-&gt;Union[list,Coroutine]:\n\"\"\"# \u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n                \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002\n                \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002\n        Args:\n            *calls: \u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n            retransmitFull: \u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42\n        Returns:\n            \u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"multicall\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.multicall(*calls,ignore=ignore,retransmitFull=retransmitFull)\nif self._loop:\n# with\u5173\u952e\u5b57\u8c03\u7528\u3001\u540c\u6b65\u6307\u5b9a\u5165\u53e3\nreturn self._use_sync(coro)\nelse:\n# \u5f02\u6b65\u6307\u5b9a\u5165\u53e3\nreturn coro\ndef _get_event_loop(self):\n\"\"\"# \u83b7\u53d6\u53ef\u7528\u7684\u4e8b\u4ef6\u5faa\u73af\n        Returns:\n            1.\u5f53\u524d\u5b58\u5728\u6ca1\u6709\u88ab\u5173\u95ed\u7684loop\uff0c\u5219\u8fd4\u56de\u8be5loop\uff0c\u5f53\u7a0b\u5e8f\u9000\u51fa\u65f6\u4e0d\u4f1a\u5173\u95ed\u8be5loop\n            2.\u5426\u8005\u751f\u6210\u65b0\u7684loop\u5e76\u6807\u8bb0\u672a\u81ea\u52a8\u751f\u6210\u7684\uff0c\u5f53\u9000\u51fa\u7a0b\u5e8f\u65f6\u4f1a\u81ea\u52a8\u5173\u95ed\u8be5loop\n        \"\"\"\nif self._loop and not self._loop.is_closed():\nreturn self._loop\nelse:\nself._is_loop_autogen = True\nreturn asyncio.new_event_loop()\ndef _has_start(self):\n\"\"\"# \u662f\u5426\u8c03\u7528\u4e86start\n        \u672a\u8fd0\u884cstart\u65f6\uff0c\u8fdb\u884c\u81ea\u542f\u52a8,\u5f53\u6267\u884cexit\u8fc7\u540e\uff0c\u4e0d\u4f1a\u81ea\u52a8\n        \"\"\"\nif self._bsclient._isclosed == -1:\nlogger.debug('\u81ea\u542f\u52a8..')\nself.start(loop=self._get_event_loop())            \nelif self._bsclient._isclosed == 1:             \nreturn False        \nreturn True\ndef _use_sync(self,coro:Coroutine):\nfutrue = asyncio.run_coroutine_threadsafe(coro,self._loop)\nreturn futrue.result()\ndef exit(self):\n\"\"\"# \u9000\u51fa\u7a0b\u5e8f\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.exit()\nif self._loop:            \nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nelse:\nreturn coro\ndef without_sub_exit(self):\n\"\"\"\u65e0\u8ba2\u9605\u65f6\u9000\u51fa\"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"without_sub_exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.__aexit__(None,None,None)\nif self._loop:\ntry:\nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nexcept Exception as e:\nlogger.warning(e)\nelse:\nreturn coro\n@property\ndef call(self)-&gt;AccessProxy:\n\"\"\"\u8fdc\u7a0b\u8c03\u7528\n        \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n                \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002\n                \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002\n        Returns:\n            \u8fd4\u56de\u8fdc\u7a0b\u8c03\u7528\u7684\u4ee3\u7406\u7c7b\n        \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"call\"\u65b9\u6cd5')\nreturn\nreturn AccessProxy(self)\n@property\ndef _base_call(self):\nreturn self._bsclient.call\ndef __enter__(self):\nself._loop = self._get_event_loop()\nself.start()\nreturn self\ndef __exit__(self, exc_type=None, exc_value=None, traceback=None):\ntry:\nif exc_type:\nraise exc_type(exc_value)\nif self._loop:\nself.without_sub_exit()\nreturn\nexcept:\nif self._loop:\nself.exit()\nasync def __aenter__(self):\nawait self._bsclient.__aenter__()\nreturn self\nasync def __aexit__(self, exc_type, exc_val, exc_tb):\nawait self._bsclient.__aexit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.call","title":"<code>call: AccessProxy</code>  <code>property</code>","text":"<p>\u8fdc\u7a0b\u8c03\u7528 \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c         \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002         \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002</p> <p>Returns:</p> Type Description <code>AccessProxy</code> <p>\u8fd4\u56de\u8fdc\u7a0b\u8c03\u7528\u7684\u4ee3\u7406\u7c7b</p>"},{"location":"api/client/#utran.client.client.Client.__call__","title":"<code>__call__(*args, url=None, username=None, password=None, loop=None)</code>","text":"<p>\u6307\u5b9a\u5165\u53e3\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6307\u5b9a\u5165\u53e3\u51fd\u6570</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def __call__(self, *args: any,\nurl:str=None,\nusername:str=None,\npassword:str=None,\nloop:asyncio.AbstractEventLoop = None) -&gt; callable:\n\"\"\"\u6307\u5b9a\u5165\u53e3\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6307\u5b9a\u5165\u53e3\u51fd\u6570\"\"\"\nif len(args)==0:\nreturn partial(self.__call__,url=url,username=username,password=password,loop=loop)\nmain=args[0]        \nloop = loop or self._get_event_loop()\nif inspect.iscoroutinefunction(main):            \ntry:\nasync def run():                    \nawait self._bsclient.start(url=url,username=username,password=password)\nif inspect.signature(main).parameters.values():\nawait main(self)\nelse:\nawait main()\nawait self._bsclient.__aexit__()\nloop.run_until_complete(run())\nfinally:\nif self._is_loop_autogen:\nloop.stop()\nloop.close()\nelif inspect.isfunction(main) or inspect.ismethod(main):            \ntry:\nself.start(url=url,username=username,password=password,loop=loop)\nif inspect.signature(main).parameters.values():\nmain(self)\nelse:\nmain()\nfinally:\nself.__exit__()\nreturn main\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.exit","title":"<code>exit()</code>","text":""},{"location":"api/client/#utran.client.client.Client.exit--_1","title":"\u9000\u51fa\u7a0b\u5e8f","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def exit(self):\n\"\"\"# \u9000\u51fa\u7a0b\u5e8f\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n    \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.exit()\nif self._loop:            \nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nelse:\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.multicall","title":"<code>multicall(*calls, ignore=None, retransmitFull=False)</code>","text":""},{"location":"api/client/#utran.client.client.Client.multicall--_1","title":"\u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c         \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002         \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002</p> <p>Parameters:</p> Name Type Description Default <code>*calls</code> <code>Coroutine</code> <p>\u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61</p> <code>()</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <code>retransmitFull</code> <code>bool</code> <p>\u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[list, Coroutine]</code> <p>\u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def multicall(self,*calls:Coroutine,ignore:bool=None,retransmitFull:bool=False)-&gt;Union[list,Coroutine]:\n\"\"\"# \u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n            \u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u81ea\u52a8\u5efa\u7acb\u8fde\u63a5 -- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5 --3\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\uff0c\u9002\u7528\u4e8e\u672a\u5efa\u7acb\u8fde\u63a5\u65f6\u4f7f\u7528\u3002\n            \u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u4f1a\uff1a1\u4f7f\u7528\u73b0\u6709\u7684\u8fde\u63a5-- 2\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002\u9002\u7528\u4e8e\u5df2\u5efa\u7acb\u8fde\u63a5\u65f6\u3002\n    Args:\n        *calls: \u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        retransmitFull: \u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42\n    Returns:\n        \u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de\n    \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"multicall\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.multicall(*calls,ignore=ignore,retransmitFull=retransmitFull)\nif self._loop:\n# with\u5173\u952e\u5b57\u8c03\u7528\u3001\u540c\u6b65\u6307\u5b9a\u5165\u53e3\nreturn self._use_sync(coro)\nelse:\n# \u5f02\u6b65\u6307\u5b9a\u5165\u53e3\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.start","title":"<code>start(url=None, username=None, password=None, loop=None)</code>","text":""},{"location":"api/client/#utran.client.client.Client.start--_1","title":"\u542f\u52a8\u8fde\u63a5","text":"<p>\u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa Args:               main:\u5165\u53e3\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u534f\u7a0b\u51fd\u6570\u3001\u534f\u7a0b\u5bf9\u8c61\u6216Future\u5bf9\u8c61\u3002\u4e3a\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a     uri: \u670d\u52a1\u5668\u5730\u5740 \u4f8b\uff1a<code>utran://127.0.0.1:8081</code>     host: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport     port: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport     runforever: \u662f\u5426\u4e00\u76f4\u8fd0\u884c,\u9ed8\u8ba4\u5165\u53e3\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e14\u65e0\u4efb\u4f55\u8ba2\u9605\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def start(self,url:str=None,username:str=None,password:str=None,loop:asyncio.AbstractEventLoop = None):\n\"\"\"# \u542f\u52a8\u8fde\u63a5\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:            \n        main:\u5165\u53e3\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662f\u534f\u7a0b\u51fd\u6570\u3001\u534f\u7a0b\u5bf9\u8c61\u6216Future\u5bf9\u8c61\u3002\u4e3a\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a\n        uri: \u670d\u52a1\u5668\u5730\u5740 \u4f8b\uff1a`utran://127.0.0.1:8081`\n        host: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n        port: \u4e0d\u4f7f\u7528uri\u65f6\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u670d\u52a1\u5668\u7684host\u548cport\n        runforever: \u662f\u5426\u4e00\u76f4\u8fd0\u884c,\u9ed8\u8ba4\u5165\u53e3\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e14\u65e0\u4efb\u4f55\u8ba2\u9605\u65f6\u4f1a\u81ea\u52a8\u9000\u51fa\n    \"\"\"\nself._loop = loop or self._get_event_loop()\ncoro = self._bsclient.start(url=url,username=username,password=password)\nif self._loop==None:\nreturn coro\ndef worker():\nlogger.debug(\"ws\u7ebf\u7a0b\u8fd0\u884c\")\nasync def waitExit():\nawait self._bsclient._exitEvent.wait()\nself._loop.run_until_complete(coro)\nself._loop.run_until_complete(waitExit())\nlogger.debug(\"ws\u7ebf\u7a0b\u9000\u51fa\")\nself._thread = threading.Thread(target=worker)\nself._thread.start()\nwhile True:\nif self._bsclient._isclosed==0: # \u7b49\u5f85\u8fde\u63a5\u6210\u529f\nbreak\ntime.sleep(0.5)\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.subscribe","title":"<code>subscribe(topic, callback, *, timeout=None, ignore=None)</code>","text":""},{"location":"api/client/#utran.client.client.Client.subscribe--_1","title":"\u8ba2\u9605\u8bdd\u9898","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Union[str, tuple[str]]</code> <p>\u8bdd\u9898</p> required <code>callback</code> <code>callable</code> <p>\u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, </p> required <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Coroutine, dict]</code> <p>{'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}</p> allTopics subTopics \u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> \u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> Source code in <code>utran\\client\\client.py</code> <pre><code>def subscribe(self,\ntopic:Union[str,tuple[str]],\ncallback:callable,\n*,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u8ba2\u9605\u8bdd\u9898\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:\n        topic: \u8bdd\u9898\n        callback: \u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, \n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n    Returns:\n        {'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}\n    |allTopics|subTopics|\n    |---------|-----------|\n    |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n    \"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"subscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.subscribe(topic=topic,callback=callback,timeout=timeout,ignore=ignore)\nif self._loop:\nreturn self._use_sync(coro)\nelse:\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.unsubscribe","title":"<code>unsubscribe(*topic, timeout=None, ignore=None)</code>","text":""},{"location":"api/client/#utran.client.client.Client.unsubscribe--_1","title":"\u53d6\u6d88\u8ba2\u9605\u8bdd\u9898","text":"<p>\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>str</code> <p>\u8bdd\u9898</p> <code>()</code> <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Coroutine, dict]</code> <p>{'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   </p> allTopics unSubTopics \u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> \u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> Source code in <code>utran\\client\\client.py</code> <pre><code>def unsubscribe(self,\n*topic:str,\ntimeout:int=None,\nignore:bool=None)-&gt;Union[Coroutine,dict]:\n\"\"\"# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\n    \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8c03\u7528\uff0c\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:\n        topic: \u8bdd\u9898\n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n    Returns:\n        {'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   \n    |allTopics|unSubTopics|\n    |---------|-----------|\n    |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n    \"\"\"\nif not self._has_start(): \nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"unsubscribe\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.unsubscribe(*topic,timeout=timeout,ignore=ignore)\nif self._loop:            \nreturn self._use_sync(coro)\nelse:\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.Client.without_sub_exit","title":"<code>without_sub_exit()</code>","text":"<p>\u65e0\u8ba2\u9605\u65f6\u9000\u51fa</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def without_sub_exit(self):\n\"\"\"\u65e0\u8ba2\u9605\u65f6\u9000\u51fa\"\"\"\nif not self._has_start():\nlogger.warning(f'\u7a0b\u5e8f\u5df2\u7ecf\u5173\u95ed,\u65e0\u6cd5\u6267\u884c:\"without_sub_exit\"\u65b9\u6cd5')\nreturn\ncoro = self._bsclient.__aexit__(None,None,None)\nif self._loop:\ntry:\nself._use_sync(coro)\nif self._is_loop_autogen:\nself._loop.stop()\nself._loop.close()\nself._loop = None\nexcept Exception as e:\nlogger.warning(e)\nelse:\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.ExeProxy","title":"<code>ExeProxy</code>","text":"<p>\u8fdc\u7a0b\u6267\u884c\u4ee3\u7406</p> Source code in <code>utran\\client\\client.py</code> <pre><code>class ExeProxy:\n\"\"\"\u8fdc\u7a0b\u6267\u884c\u4ee3\u7406\"\"\"\n__slots__ = ('_accessProxy_',)\ndef __init__(self,accessProxy:'AccessProxy'):\nself._accessProxy_ = accessProxy\ndef __getattr__(self, methodName):\n\"\"\"\u7c7b\u7684\u8bbf\u95ee\"\"\"\nself._accessProxy_.__getattr__(self._accessProxy_._temp_name_+'.'+methodName)\nreturn self\ndef __call__(self, *args: any, **dicts: any) -&gt; Union[any,asyncio.Task,dict]:\n\"\"\"# \u6267\u884c\u8fdc\u7a0b\u51fd\u6570\n        Returns:\n            \u8fd4\u56de\u503c (dict): \u5f53\u9009\u9879\u6807\u8bb0\u4e3amulticall\u65f6: `client.call(multicall=True).add(1,2)`         \n            \u8fd4\u56de\u503c (asyncio.Task): \u5f53baseclient\u5df2\u7ecf\u8fd0\u884c\u65f6\uff0c`client.call.add(1,2)` \u8fd4\u56deTask\u3002\u53ef\u4f7f\u7528await\u62ff\u5230\u8c03\u7528\u7ed3\u679c\uff0c\u4f8b: `await client.call.add(1,2)`\n            \u8fd4\u56de\u503c (any): \u5f53baseclient\u672a\u8fd0\u884c\u65f6\uff0c`client.call.add(1,2)`\u8fd4\u56de\u6700\u7ec8\u7684\u8c03\u7528\u7ed3\u679c\n        \"\"\"\ncoro:Coroutine = self._accessProxy_._client_._base_call(methodName=self._accessProxy_._temp_name_,args=args,dicts=dicts,**self._accessProxy_._temp_opts_)\nif self._accessProxy_._client_._loop:\nreturn self._accessProxy_._client_._use_sync(coro)\nelse:\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.ExeProxy.__call__","title":"<code>__call__(*args, **dicts)</code>","text":""},{"location":"api/client/#utran.client.client.ExeProxy.__call__--_1","title":"\u6267\u884c\u8fdc\u7a0b\u51fd\u6570","text":"<p>Returns:</p> Name Type Description <code>\u8fd4\u56de\u503c</code> <code>dict</code> <p>\u5f53\u9009\u9879\u6807\u8bb0\u4e3amulticall\u65f6: <code>client.call(multicall=True).add(1,2)</code> </p> <code>\u8fd4\u56de\u503c</code> <code>asyncio.Task</code> <p>\u5f53baseclient\u5df2\u7ecf\u8fd0\u884c\u65f6\uff0c<code>client.call.add(1,2)</code> \u8fd4\u56deTask\u3002\u53ef\u4f7f\u7528await\u62ff\u5230\u8c03\u7528\u7ed3\u679c\uff0c\u4f8b: <code>await client.call.add(1,2)</code></p> <code>\u8fd4\u56de\u503c</code> <code>any</code> <p>\u5f53baseclient\u672a\u8fd0\u884c\u65f6\uff0c<code>client.call.add(1,2)</code>\u8fd4\u56de\u6700\u7ec8\u7684\u8c03\u7528\u7ed3\u679c</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def __call__(self, *args: any, **dicts: any) -&gt; Union[any,asyncio.Task,dict]:\n\"\"\"# \u6267\u884c\u8fdc\u7a0b\u51fd\u6570\n    Returns:\n        \u8fd4\u56de\u503c (dict): \u5f53\u9009\u9879\u6807\u8bb0\u4e3amulticall\u65f6: `client.call(multicall=True).add(1,2)`         \n        \u8fd4\u56de\u503c (asyncio.Task): \u5f53baseclient\u5df2\u7ecf\u8fd0\u884c\u65f6\uff0c`client.call.add(1,2)` \u8fd4\u56deTask\u3002\u53ef\u4f7f\u7528await\u62ff\u5230\u8c03\u7528\u7ed3\u679c\uff0c\u4f8b: `await client.call.add(1,2)`\n        \u8fd4\u56de\u503c (any): \u5f53baseclient\u672a\u8fd0\u884c\u65f6\uff0c`client.call.add(1,2)`\u8fd4\u56de\u6700\u7ec8\u7684\u8c03\u7528\u7ed3\u679c\n    \"\"\"\ncoro:Coroutine = self._accessProxy_._client_._base_call(methodName=self._accessProxy_._temp_name_,args=args,dicts=dicts,**self._accessProxy_._temp_opts_)\nif self._accessProxy_._client_._loop:\nreturn self._accessProxy_._client_._use_sync(coro)\nelse:\nreturn coro\n</code></pre>"},{"location":"api/client/#utran.client.client.ExeProxy.__getattr__","title":"<code>__getattr__(methodName)</code>","text":"<p>\u7c7b\u7684\u8bbf\u95ee</p> Source code in <code>utran\\client\\client.py</code> <pre><code>def __getattr__(self, methodName):\n\"\"\"\u7c7b\u7684\u8bbf\u95ee\"\"\"\nself._accessProxy_.__getattr__(self._accessProxy_._temp_name_+'.'+methodName)\nreturn self\n</code></pre>"},{"location":"api/client/#_4","title":"\u3010\u57fa\u7840\u5ba2\u6237\u7aef\u3011","text":"\u4f7f\u7528\u793a\u4f8b<pre><code>import utran\nfrom utran.client.baseclient import BaseClient\ndef on_topic(msg,topic):\nprint(f\"{topic}\uff1a\",msg)\n# \u5b9e\u4f8b\u5316\uff0c\u5e76\u6307\u5b9a\u65ad\u7ebf\u91cd\u8fde\u6b21\u6570\u4e3a3\u6b21\nbsclient = BaseClient(maxReconnectNum=3)\nasync def main():\n# \u8ba2\u9605\u8bdd\u9898\nres = await bsclient.subscribe('good',on_topic)\nprint(res)\n# \u8c03\u7528\u8fdc\u7a0b\u51fd\u6570\nres = await bsclient.call('add',dicts=dict(a=1,b=2))\nprint(res)\n# \u8c03\u7528\u4e0d\u5b58\u5728\u7684\u8fdc\u7a0b\u51fd\u6570\uff0cignore=True \u5ffd\u7565\u9519\u8bef\nres = await bsclient.call('add300',dicts=dict(a=0,b=1),ignore=True)\nprint(res)\n# \u5408\u5e76\u591a\u6b21\u8c03\u7528\nres:list = await bsclient.multicall(bsclient.call('add',dicts=dict(a=1,b=2),multicall=True),\nbsclient.call('add',dicts=dict(a=2,b=2),multicall=True),\nbsclient.call('add',dicts=dict(a=3,b=2),multicall=True),\nbsclient.call('add',dicts=dict(a=4,b=2),multicall=True),\nbsclient.call('add300',dicts=dict(a=6,b=2),multicall=True)\n,ignore=True)\nprint(res)\n# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\nres = await bsclient.unsubscribe('good')\nprint(res)\n# \u9000\u51fa\u7a0b\u5e8f\n# await bsclient.exit()\nif __name__ == \"__main__\":\n# \u8fd0\u884c\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre>"},{"location":"api/client/#utran.client.baseclient.BaseClient","title":"<code>BaseClient</code>","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>\u670d\u52a1\u5668\u5730\u5740</p> <code>'ws://localhost:8080'</code> <code>maxReconnectNum</code> <code>int</code> <p>\u65ad\u7ebf\u540e\u6700\u5927\u91cd\u8fde\u6b21\u6570</p> <code>10</code> <code>ignore</code> <code>bool</code> <p>\u5168\u5c40\u8bbe\u7f6e\uff0c\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>True</code> <code>compress</code> <code>int</code> <p>\u662f\u5426\u538b\u7f29\u6570\u636e</p> <code>0</code> <code>max_msg_size</code> <code>int</code> <p>\u8868\u793a\u63a5\u6536\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u63a5\u6536\u5230\u7684\u6d88\u606f\u5927\u5c0f\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002</p> <code>4 * 1024 * 1024</code> <code>username</code> <code>str</code> <p>\u7528\u6237\u540d</p> <code>None</code> <code>password</code> <code>str</code> <p>\u5bc6\u7801</p> <code>None</code> Source code in <code>utran\\client\\baseclient.py</code> <pre><code>class BaseClient:\n\"\"\"\n    Args:\n        url: \u670d\u52a1\u5668\u5730\u5740\n        maxReconnectNum: \u65ad\u7ebf\u540e\u6700\u5927\u91cd\u8fde\u6b21\u6570\n        ignore: \u5168\u5c40\u8bbe\u7f6e\uff0c\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        compress: \u662f\u5426\u538b\u7f29\u6570\u636e\n        max_msg_size: \u8868\u793a\u63a5\u6536\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u63a5\u6536\u5230\u7684\u6d88\u606f\u5927\u5c0f\u8d85\u8fc7\u8be5\u503c\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\n        username: \u7528\u6237\u540d\n        password: \u5bc6\u7801\n    \"\"\"\n__slots__ = ('_url','_session','_ws','_rpc_requests','_isclosed','_maxReconnectNum','_reconnect_attempts','_topics_handler','_ignore',\n'_exitEvent','_compress','_max_msg_size','_receive_task','__auth')\ndef __init__(self,\nurl:str='ws://localhost:8080',\nmaxReconnectNum:int=10,\nignore:bool=True,\ncompress: int = 0,\nmax_msg_size: int = 4 * 1024 * 1024,\nusername:str=None,\npassword:str=None) -&gt; None:\nself._url = url\nself._session:aiohttp.ClientSession = None\nself._ws:aiohttp.ClientWebSocketResponse = None\nself._rpc_requests = dict()\nself._isclosed:int = -1       # -1\u8868\u793a\u8fd8\u672a\u521d\u59cb\u5316\uff0c0\u8868\u793a\u5df2\u8fde\u63a5\uff0c1\u8868\u793a\u65ad\u5f00\u8fde\u63a5\nself._maxReconnectNum = maxReconnectNum\nself._reconnect_attempts = 0\nself._topics_handler = dict()\nself._ignore = ignore\nself._exitEvent = asyncio.Event()                               # \u7528\u4e8e\u7b49\u5f85\u9000\u51fa\nself._compress = compress\nself._max_msg_size = max_msg_size\nself._receive_task = None\nif username!=None or password!=None:\nassert username!=None,'username is None.'\nassert password!=None,'password is None.'\nself.__auth:aiohttp.BasicAuth = aiohttp.BasicAuth(username,password)\nelse:\nself.__auth:aiohttp.BasicAuth = aiohttp.BasicAuth('utranhost','utranhost')\nasync def start(self,url:str=None,username:str=None,password:str=None):\nself._url = url or self._url\nself._session = aiohttp.ClientSession() if self._session==None or self._session.closed else self._session\nif username!=None or password!=None:\nassert username!=None,'username is None.'\nassert password!=None,'password is None.'\nself.__auth:aiohttp.BasicAuth = aiohttp.BasicAuth(username,password)\nawait self.connect()\nself._reconnect_attempts = 0\nif self._topics_handler:\nitems = self._topics_handler.items()\ntopics = [k for k,v in items]\ncallbacks = [v for k,v in items]\nawait self.subscribe(topics,callbacks,ignore=True)\nlogger.success(f\"\u5df2\u91cd\u65b0\u8ba2\u9605\u8bdd\u9898: {topics}.\")\nself._exitEvent.clear()\nfor v in self._rpc_requests.values():\nfutrue:asyncio.Future = v[0]\nfutrue.set_exception(Exception('disconnection'))\nreturn self\nasync def connect(self):\nself._ws = await self._session.ws_connect(self._url,compress=self._compress,max_msg_size=self._max_msg_size,auth=self.__auth)        \nmsg = await self._ws.receive()\nif msg.data != 'ok':\nawait self.exit()\nraise ConnectionError(msg.data)\nlogger.success(f\"\u8fde\u63a5\u6210\u529f.\")\nself._receive_task = asyncio.create_task(self.__receive())  \nself._isclosed = 0\nasync def _reconnecting(self):\n\"\"\"\u65ad\u7ebf\u91cd\u8fde\"\"\"\nif self._isclosed==0:\nlogger.error(f\"\u65ad\u7ebf\u91cd\u8fde..\")\nfor i in range(self._maxReconnectNum):\ntry:\nlogger.error(f'Reconnecting... (attempt {i+1}/{self._maxReconnectNum})')\nawait asyncio.sleep(0.5 * (min(i, 10)))\nawait self.start()\nreturn\nexcept Exception as e:\nlogger.error(f'WebSocket connection error: {e}')                    \ncontinue\nawait self.exit()\nfor v in self._rpc_requests.values():\nfutrue:asyncio.Future = v[0]\nfutrue.set_exception(ConnectionResetError('Max reconnect attempts reached. Aborting.'))\nelse:\nawait self.exit()\nasync def __receive(self):\n# print('\u63a5\u6536\u5f00\u542f')\nwhile True:\nmsg = await self._ws.receive()\nif msg.type == aiohttp.WSMsgType.TEXT:\nresponse:dict = msg.json()\nif response['responseType'] == UtType.PUBLISH.value:\nasyncio.create_task(self._handler_publish(**response.get('result')))\nelif response['responseType'] in [UtType.RPC.value,UtType.SUBSCRIBE.value,UtType.UNSUBSCRIBE.value]:\nrequest_id = response['id']\nfuture,request = self._rpc_requests.pop(request_id)\nfuture.set_result(response)\nelif msg.type == aiohttp.WSMsgType.CLOSED:\nbreak\nif self._isclosed==0:\nasyncio.create_task(self._reconnecting())\n# print('\u63a5\u6536\u5173\u95ed')\nasync def _send(self,request:dict,timeout:int=None)-&gt;dict:\ntry:\nawait self._ws.send_json(request)\nexcept Exception as e:\n# logger.error(e)\npass\nfutrue = asyncio.Future()\nself._rpc_requests[request['id']] = (futrue,request)\nresponse = await asyncio.wait_for(futrue,timeout)\nreturn response\nasync def _handler_publish(self,topic:str,msg:any):\n\"\"\"\u5904\u7406\u8bdd\u9898\u63a8\u6d41\"\"\"\ncallback =  self._topics_handler.get(topic)\nif not callable:            \n# print(f\"\u63a8\u9001\u3010{topic}\u3011\u8bdd\u9898:\",msg)\nreturn\nif asyncio.iscoroutinefunction(callback):\nawait callback(msg,topic)                \nelse:\ncallback(msg,topic)\nasync def subscribe(self,\ntopic:Union[str,tuple[str]],\ncallback:callable,\n*,\ntimeout:int=None,\nignore:bool=None)-&gt;dict:\n\"\"\"# \u8ba2\u9605\u8bdd\u9898\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:\n            topic: \u8bdd\u9898\n            callback: \u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, \n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        Returns:\n            {'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}\n        |allTopics|subTopics|\n        |---------|-----------|\n        |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n        \"\"\"\nif type(topic) not in (tuple,list):\ntopic = [topic]\nif type(callback) not in (tuple,list):\ncallback = [callback]\nif len(topic) != len(callback):\nraise ValueError('The topic must correspond to the callback one by one')\nfor t,c in zip(topic,callback):\nif type(t)!=str:                 \nraise ValueError(f'Subscribe Error \"{type(t)}\" is not a string!')\nif not callable(c):\nraise ValueError(f'Subscribe Error \"{type(c)}\" is not callable!')\nself._topics_handler[t] = c\nrequest = dict(id=gen_requestId(),requestType=UtType.SUBSCRIBE.value,topics=topic)\ntry:\nresponse:dict = await self._send(request,timeout=timeout)\nexcept Exception as e:\nif str(e)=='disconnection':\nreturn await self.subscribe(topic,callback,timeout=timeout,ignore=ignore)\nelse:\nraise e\nignore = self._ignore if ignore== None else ignore\nif response.get('state') or ignore:\nself._exitEvent.clear()\nresult:dict = response.get('result')    \nlogger.success(f'\u6210\u529f\u8ba2\u9605:{result.get(\"subTopics\")}')\nreturn result\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\nasync def unsubscribe(self,\n*topic:str,\ntimeout:int=None,\nignore:bool=None)-&gt;dict:\n\"\"\"# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\n        \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n        Args:\n            topic: \u8bdd\u9898\n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        Returns:\n            {'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   \n        |allTopics|unSubTopics|\n        |---------|-----------|\n        |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n        \"\"\"\nif topic:\n[self._topics_handler.pop(t) for t in topic if t in self._topics_handler]              \nrequest = dict(id=gen_requestId(),requestType=UtType.UNSUBSCRIBE.value,topics=topic)\ntry:\nresponse:dict = await self._send(request,timeout=timeout)        \nexcept Exception as e:\nif str(e)=='disconnection':\nreturn await self.unsubscribe(*topic,timeout=timeout,ignore=ignore)\nelse:\nraise e\nignore = self._ignore if ignore== None else ignore\nif response.get('state') or ignore:\nresult:dict = response.get('result')\nif result!=None:logger.success(f'\u53d6\u6d88\u8ba2\u9605:{result.get(\"unSubTopics\")}')\nif not self._topics_handler:\nlogger.debug('\u5df2\u65e0\u4efb\u4f55\u8ba2\u9605')               \nreturn result\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\nasync def call(self,\nmethodName:str,\nargs:list=tuple(),\ndicts:dict=dict(),\n*,\ntimeout:int=None,\nmulticall:bool=False,\nignore:bool=None)-&gt;Union[Any,dict]:\n\"\"\"# \u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n        Args:\n            methodName: \u8fdc\u7a0b\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u7684\u540d\u79f0\n            args: \u5217\u8868\u53c2\u6570\n            dicts: \u5b57\u5178\u53c2\u6570\n            timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n            multicall: \u662f\u5426\u6807\u8bb0\u4e3a\u5408\u5e76\u8c03\u7528\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        \"\"\"\nrequest = dict(id=gen_requestId(),requestType=UtType.RPC.value,methodName=methodName,args=args,dicts=dicts)\nif multicall:\nreturn request,timeout\nelse:\ntry:\nresponse:dict = await self._send(request,timeout=timeout)\nexcept Exception as e:\nif str(e)=='disconnection':\nreturn await self.call(methodName,args,dicts,timeout=timeout,ignore=ignore)\nelse:\nraise e\nignore = self._ignore if ignore== None else ignore\nif response.get('state') or ignore:\nreturn response.get('result')\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\nasync def multicall(self,*calls,ignore:bool=None,retransmitFull:bool=False)-&gt;list:\n\"\"\"# \u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n        Args:\n            *calls: \u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61\n            ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n            retransmitFull: \u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42\n        Returns:\n            \u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de\n        \"\"\"\nignore = self._ignore if ignore== None else ignore\nsuccess = []\nfaild_calls = []\nfaild_indexs = []\nif asyncio.iscoroutine(calls[0]):            \nrequests = [await c for c in calls]\nelse:\nrequests = calls\nres = await asyncio.gather(*[self._send(request,timeout=timeout) for request,timeout in requests],return_exceptions=True)\nfor i in range(len(res)):\nresponse:dict = res[i]\nif isinstance(response, Exception):\n# \u5904\u7406\u8fde\u63a5\u9519\u8bef\nif str(response)=='disconnection':\nif retransmitFull:\nfaild_calls = requests\nsuccess = []\nbreak\nelse:\nfaild_calls.append(requests[i])\nfaild_indexs.append(i)\nelse:\nraise response\nelse:\n# \u5904\u7406\u6210\u529f\u54cd\u5e94\nif response.get('state') or ignore:\nsuccess.append(response.get('result'))\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\nif faild_calls:\nres = await self.multicall(*faild_calls,ignore=ignore,retransmitFull=retransmitFull)\nif retransmitFull:\nreturn res\nelse:\n[success.insert(faild_indexs[i],res[i]) for i in range(len(faild_calls))]\nreturn success\nasync def exit(self):        \nself._isclosed = 1\nawait self._ws.close()\nawait self._session.close()\nself._exitEvent.set()\nself._exitEvent = asyncio.Event()  # \u4fbf\u4e8e\u4e0b\u6b21\u4f7f\u7528\nasync def __aenter__(self):\nawait self.start()        \nreturn self\nasync def __aexit__(self, exc_type=None, exc_val=None, exc_tb=None):\ntry:\nif exc_type:\n# print(exc_tb)\nraise exc_type(exc_val)\ntopics = list(self._topics_handler.keys())\nif topics:\nlogger.info(f'\u7ee7\u7eed\u7b49\u5f85\u8ba2\u9605\u63a8\u9001:{topics}')\nself._exitEvent.clear()\nawait self._exitEvent.wait()\nlogger.success(f'\u9000\u51fa\u7a0b\u5e8f')\nelse:\nawait self.exit()\nexcept:\nif self._isclosed==0:\nawait self.exit()\n</code></pre>"},{"location":"api/client/#utran.client.baseclient.BaseClient.call","title":"<code>call(methodName, args=tuple(), dicts=dict(), *, timeout=None, multicall=False, ignore=None)</code>  <code>async</code>","text":""},{"location":"api/client/#utran.client.baseclient.BaseClient.call--_1","title":"\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570","text":"<p>Parameters:</p> Name Type Description Default <code>methodName</code> <code>str</code> <p>\u8fdc\u7a0b\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u7684\u540d\u79f0</p> required <code>args</code> <code>list</code> <p>\u5217\u8868\u53c2\u6570</p> <code>tuple()</code> <code>dicts</code> <code>dict</code> <p>\u5b57\u5178\u53c2\u6570</p> <code>dict()</code> <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <code>multicall</code> <code>bool</code> <p>\u662f\u5426\u6807\u8bb0\u4e3a\u5408\u5e76\u8c03\u7528</p> <code>False</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> Source code in <code>utran\\client\\baseclient.py</code> <pre><code>async def call(self,\nmethodName:str,\nargs:list=tuple(),\ndicts:dict=dict(),\n*,\ntimeout:int=None,\nmulticall:bool=False,\nignore:bool=None)-&gt;Union[Any,dict]:\n\"\"\"# \u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n    Args:\n        methodName: \u8fdc\u7a0b\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u7684\u540d\u79f0\n        args: \u5217\u8868\u53c2\u6570\n        dicts: \u5b57\u5178\u53c2\u6570\n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        multicall: \u662f\u5426\u6807\u8bb0\u4e3a\u5408\u5e76\u8c03\u7528\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n    \"\"\"\nrequest = dict(id=gen_requestId(),requestType=UtType.RPC.value,methodName=methodName,args=args,dicts=dicts)\nif multicall:\nreturn request,timeout\nelse:\ntry:\nresponse:dict = await self._send(request,timeout=timeout)\nexcept Exception as e:\nif str(e)=='disconnection':\nreturn await self.call(methodName,args,dicts,timeout=timeout,ignore=ignore)\nelse:\nraise e\nignore = self._ignore if ignore== None else ignore\nif response.get('state') or ignore:\nreturn response.get('result')\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\n</code></pre>"},{"location":"api/client/#utran.client.baseclient.BaseClient.multicall","title":"<code>multicall(*calls, ignore=None, retransmitFull=False)</code>  <code>async</code>","text":""},{"location":"api/client/#utran.client.baseclient.BaseClient.multicall--_1","title":"\u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570","text":"<p>Parameters:</p> Name Type Description Default <code>*calls</code> <p>\u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61</p> <code>()</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <code>retransmitFull</code> <code>bool</code> <p>\u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42</p> <code>False</code> <p>Returns:</p> Type Description <code>list</code> <p>\u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de</p> Source code in <code>utran\\client\\baseclient.py</code> <pre><code>async def multicall(self,*calls,ignore:bool=None,retransmitFull:bool=False)-&gt;list:\n\"\"\"# \u5408\u5e76\u591a\u6b21\u8c03\u7528\u8fdc\u7a0b\u65b9\u6cd5\u6216\u51fd\u6570\n    Args:\n        *calls: \u9700\u8981\u8fdc\u7a0b\u8c03\u7528\u534f\u7a0b\u5bf9\u8c61\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n        retransmitFull: \u4e8e\u670d\u52a1\u5668\u5931\u8054\u540e\uff0c\u9ed8\u8ba4\u53ea\u91cd\u53d1\u672a\u6536\u5230\u54cd\u5e94\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u4e3aTrue\u5219\u91cd\u53d1\u5168\u90e8\u8bf7\u6c42\n    Returns:\n        \u6267\u884c\u7ed3\u679c\u6309\u987a\u5e8f\u653e\u5728\u5217\u8868\u4e2d\u8fd4\u56de\n    \"\"\"\nignore = self._ignore if ignore== None else ignore\nsuccess = []\nfaild_calls = []\nfaild_indexs = []\nif asyncio.iscoroutine(calls[0]):            \nrequests = [await c for c in calls]\nelse:\nrequests = calls\nres = await asyncio.gather(*[self._send(request,timeout=timeout) for request,timeout in requests],return_exceptions=True)\nfor i in range(len(res)):\nresponse:dict = res[i]\nif isinstance(response, Exception):\n# \u5904\u7406\u8fde\u63a5\u9519\u8bef\nif str(response)=='disconnection':\nif retransmitFull:\nfaild_calls = requests\nsuccess = []\nbreak\nelse:\nfaild_calls.append(requests[i])\nfaild_indexs.append(i)\nelse:\nraise response\nelse:\n# \u5904\u7406\u6210\u529f\u54cd\u5e94\nif response.get('state') or ignore:\nsuccess.append(response.get('result'))\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\nif faild_calls:\nres = await self.multicall(*faild_calls,ignore=ignore,retransmitFull=retransmitFull)\nif retransmitFull:\nreturn res\nelse:\n[success.insert(faild_indexs[i],res[i]) for i in range(len(faild_calls))]\nreturn success\n</code></pre>"},{"location":"api/client/#utran.client.baseclient.BaseClient.subscribe","title":"<code>subscribe(topic, callback, *, timeout=None, ignore=None)</code>  <code>async</code>","text":""},{"location":"api/client/#utran.client.baseclient.BaseClient.subscribe--_1","title":"\u8ba2\u9605\u8bdd\u9898","text":"<p>\u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Union[str, tuple[str]]</code> <p>\u8bdd\u9898</p> required <code>callback</code> <code>callable</code> <p>\u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, </p> required <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <code>ignore</code> <code>bool</code> <p>\u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>{'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}</p> allTopics subTopics \u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> \u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> Source code in <code>utran\\client\\baseclient.py</code> <pre><code>async def subscribe(self,\ntopic:Union[str,tuple[str]],\ncallback:callable,\n*,\ntimeout:int=None,\nignore:bool=None)-&gt;dict:\n\"\"\"# \u8ba2\u9605\u8bdd\u9898\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:\n        topic: \u8bdd\u9898\n        callback: \u56de\u8c03\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570 msg,topic\u3002\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u56de\u8c03\u51fd\u6570, \n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n        ignore: \u662f\u5426\u5ffd\u7565\u8fdc\u7a0b\u6267\u884c\u7ed3\u679c\u7684\u9519\u8bef\uff0c\u5ffd\u7565\u9519\u8bef\u5219\u503c\u7528None\u586b\u5145\n    Returns:\n        {'allTopics': ['topic1','topic2'], 'subTopics': ['topic2']}\n    |allTopics|subTopics|\n    |---------|-----------|\n    |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n    \"\"\"\nif type(topic) not in (tuple,list):\ntopic = [topic]\nif type(callback) not in (tuple,list):\ncallback = [callback]\nif len(topic) != len(callback):\nraise ValueError('The topic must correspond to the callback one by one')\nfor t,c in zip(topic,callback):\nif type(t)!=str:                 \nraise ValueError(f'Subscribe Error \"{type(t)}\" is not a string!')\nif not callable(c):\nraise ValueError(f'Subscribe Error \"{type(c)}\" is not callable!')\nself._topics_handler[t] = c\nrequest = dict(id=gen_requestId(),requestType=UtType.SUBSCRIBE.value,topics=topic)\ntry:\nresponse:dict = await self._send(request,timeout=timeout)\nexcept Exception as e:\nif str(e)=='disconnection':\nreturn await self.subscribe(topic,callback,timeout=timeout,ignore=ignore)\nelse:\nraise e\nignore = self._ignore if ignore== None else ignore\nif response.get('state') or ignore:\nself._exitEvent.clear()\nresult:dict = response.get('result')    \nlogger.success(f'\u6210\u529f\u8ba2\u9605:{result.get(\"subTopics\")}')\nreturn result\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\n</code></pre>"},{"location":"api/client/#utran.client.baseclient.BaseClient.unsubscribe","title":"<code>unsubscribe(*topic, timeout=None, ignore=None)</code>  <code>async</code>","text":""},{"location":"api/client/#utran.client.baseclient.BaseClient.unsubscribe--_1","title":"\u53d6\u6d88\u8ba2\u9605\u8bdd\u9898","text":"<p>\u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570<code>main</code>\u540e\u81ea\u52a8\u9000\u51fa</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>str</code> <p>\u8bdd\u9898</p> <code>()</code> <code>timeout</code> <code>int</code> <p>\u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>{'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   </p> allTopics unSubTopics \u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> \u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 <code>list</code> Source code in <code>utran\\client\\baseclient.py</code> <pre><code>async def unsubscribe(self,\n*topic:str,\ntimeout:int=None,\nignore:bool=None)-&gt;dict:\n\"\"\"# \u53d6\u6d88\u8ba2\u9605\u8bdd\u9898\n    \u5b58\u5728\u8ba2\u9605\u7684\u8bdd\u9898\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\u8bdd\u9898\u7684\u63a8\u9001\uff0c\u65e0\u8ba2\u9605\u8bdd\u9898\u65f6\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5165\u53e3\u51fd\u6570`main`\u540e\u81ea\u52a8\u9000\u51fa\n    Args:\n        topic: \u8bdd\u9898\n        timeout: \u672c\u5730\u7b49\u5f85\u54cd\u5e94\u8d85\u65f6\uff0c\u629b\u51faTimeoutError\u9519\u8bef\uff08\u5355\u4f4d\uff1a\u79d2\uff09\n    Returns:\n        {'allTopics': ['topic1'], 'unSubTopics': ['topic2']}   \n    |allTopics|unSubTopics|\n    |---------|-----------|\n    |\u6240\u6709\u5df2\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\u672c\u6b21\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898 `list`|\n    \"\"\"\nif topic:\n[self._topics_handler.pop(t) for t in topic if t in self._topics_handler]              \nrequest = dict(id=gen_requestId(),requestType=UtType.UNSUBSCRIBE.value,topics=topic)\ntry:\nresponse:dict = await self._send(request,timeout=timeout)        \nexcept Exception as e:\nif str(e)=='disconnection':\nreturn await self.unsubscribe(*topic,timeout=timeout,ignore=ignore)\nelse:\nraise e\nignore = self._ignore if ignore== None else ignore\nif response.get('state') or ignore:\nresult:dict = response.get('result')\nif result!=None:logger.success(f'\u53d6\u6d88\u8ba2\u9605:{result.get(\"unSubTopics\")}')\nif not self._topics_handler:\nlogger.debug('\u5df2\u65e0\u4efb\u4f55\u8ba2\u9605')               \nreturn result\nelse:\nraise RuntimeError(f\"Response '{response.get('responseType')}' Error\uff0c\"+response.get('error'))\n</code></pre>"},{"location":"api/handler/","title":"\u5904\u7406\u6a21\u5757","text":""},{"location":"api/handler/#utran.handler.process_multicall_request","title":"<code>process_multicall_request(request, connection, register, sub_container, pool=None)</code>  <code>async</code>","text":"<p>\u5904\u7406multicall\u8bf7\u6c42</p> Source code in <code>utran\\handler.py</code> <pre><code>async def process_multicall_request(request:UtRequest,connection:ClientConnection,register:Register,sub_container:SubscriptionContainer,pool:ProcessPoolExecutor=None)-&gt;bool:\n\"\"\"\u5904\u7406multicall\u8bf7\u6c42\"\"\"\ntasks = []\nfor _r in request.multiple:\nr:UtRequest = create_UtRequest(_r)\nif UtType.RPC==r.requestType:\n#  Rpc\u8bf7\u6c42\ntasks.append(asyncio.create_task(process_rpc_request(r,connection,register,to_send=False,pool=pool)))\ncontinue\nelif UtType.UNSUBSCRIBE==r.requestType:\n# \u53d6\u6d88\u8ba2\u9605 topic  \ntasks.append(asyncio.create_task(process_unsubscribe_request(r,connection,sub_container,to_send=False)))\ncontinue\nelif UtType.SUBSCRIBE==r.requestType:\n# \u8ba2\u9605 topic\ntasks.append(asyncio.create_task(process_subscribe_request(r,connection,sub_container,to_send=False)))\ncontinue\nelif UtType.PUBLISH==r.requestType:\n# \u53d1\u5e03        \ntasks.append(asyncio.create_task(process_publish_request(r,sub_container)))\ncontinue\nresponse = UtResponse(id=request.id,\nstate=UtState.SUCCESS,\nresponseType=request.requestType)\nres = []\nfor task in tasks:\n_response:UtResponse = await task\nres.append(_response.to_dict())\nresponse.result = res\nawait connection.send(response)\nreturn False\n</code></pre>"},{"location":"api/handler/#utran.handler.process_publish_request","title":"<code>process_publish_request(request, sub_container)</code>  <code>async</code>","text":""},{"location":"api/handler/#utran.handler.process_publish_request--publish","title":"\u5904\u7406publish\u53d1\u5e03\u8bf7\u6c42","text":"<p>Parameters:</p> Name Type Description Default <code>request</code> <code>UtRequest</code> <p>\u8bf7\u6c42\u4f53</p> required <code>sub_container</code> <code>SubscriptionContainer</code> <p>\u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b</p> required"},{"location":"api/handler/#utran.handler.process_publish_request--response","title":"response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u672c\u6b21\u8bf7\u6c42\u7684id</p> <code>responseType</code> <code>str</code> <p>'publish'</p> <code>state</code> <code>int</code> <p>\u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f        </p> <code>result</code> <code>dict</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 {'topic':\u8bdd\u9898,'msg':\u8bdd\u9898\u6d88\u606f}</p> <code>error</code> <code>str</code> <p>\u5931\u8d25\u4fe1\u606f</p> <code>methodName</code> <code>str</code> <p>None</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5</p> Source code in <code>utran\\handler.py</code> <pre><code>async def process_publish_request(request:UtRequest,sub_container:SubscriptionContainer)-&gt;bool:\n\"\"\"\n    # \u5904\u7406publish\u53d1\u5e03\u8bf7\u6c42\n    Args:\n        request: \u8bf7\u6c42\u4f53\n        sub_container (SubscriptionContainer): \u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b\n    ## response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193\n    Attributes:\n        id (int):  \u672c\u6b21\u8bf7\u6c42\u7684id\n        responseType (str): 'publish'\n        state (int):  \u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f        \n        result (dict): \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 {'topic':\u8bdd\u9898,'msg':\u8bdd\u9898\u6d88\u606f}\n        error (str): \u5931\u8d25\u4fe1\u606f\n        methodName (str): None\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5\n    \"\"\"\ntopics:tuple[str] = request.topics\nmsg:dict = request.msg\nresponse =UtResponse(id=request.id,responseType=request.requestType,state=UtState.SUCCESS)\n# asyncio.sleep(0) \u91ca\u653e\u63a7\u5236\u6743\uff0c\u7528\u4e8e\u9632\u6b62publish\u88ab\u6301\u7eed\u4e0d\u95f4\u65ad\u8c03\u7528\u800c\u5bfc\u81f4\u7684\u963b\u585e\u95ee\u9898\nfor topic in topics:\nif not topic:\ncontinue\nsubIds:list = sub_container.get_subId_by_topic(topic)\nfor subid in subIds:\nsub:ClientConnection = sub_container.get_sub_by_id(subid)\nresponse.result = dict(topic=topic,msg=msg)\nif sub:await sub.send(response)\nawait asyncio.sleep(0)\nreturn False\n</code></pre>"},{"location":"api/handler/#utran.handler.process_request","title":"<code>process_request(request, connection, register, sub_container, pool)</code>  <code>async</code>","text":""},{"location":"api/handler/#utran.handler.process_request--_1","title":"\u5904\u7406\u8bf7\u6c42\u603b\u5165\u53e3","text":"<p>Parameters:</p> Name Type Description Default <code>request</code> <code>UtRequest</code> <p>\u8bf7\u6c42\u4f53</p> required <code>connection</code> <code>ClientConnection</code> <p>\u5ba2\u6237\u7aef\u8fde\u63a5</p> required <code>register</code> <code>Register</code> <p>\u6ce8\u518c\u7c7b\u5b9e\u4f8b</p> required <code>sub_container</code> <code>SubscriptionContainer</code> <p>\u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5</p> Source code in <code>utran\\handler.py</code> <pre><code>async def process_request(request:UtRequest,connection:ClientConnection,register:Register,sub_container:SubscriptionContainer,pool:ProcessPoolExecutor)-&gt;bool:\n\"\"\"# \u5904\u7406\u8bf7\u6c42\u603b\u5165\u53e3\n    Args:\n        request (UtRequest): \u8bf7\u6c42\u4f53\n        connection (ClientConnection): \u5ba2\u6237\u7aef\u8fde\u63a5\n        register (Register): \u6ce8\u518c\u7c7b\u5b9e\u4f8b\n        sub_container (SubscriptionContainer): \u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5\n    \"\"\"\ntry:\nif UtType.RPC==request.requestType:\n#  Rpc\u8bf7\u6c42\nt = asyncio.create_task(process_rpc_request(request,connection,register,pool=pool))\nreturn await t\nelif UtType.UNSUBSCRIBE==request.requestType:\n# \u53d6\u6d88\u8ba2\u9605 topic        \nreturn await process_unsubscribe_request(request,connection,sub_container)\nelif UtType.SUBSCRIBE==request.requestType:\n# \u8ba2\u9605 topic\nreturn await process_subscribe_request(request,connection,sub_container)\nelif UtType.PUBLISH==request.requestType:\n# \u53d1\u5e03        \nreturn await process_publish_request(request,sub_container)\nelif UtType.MULTICALL == request.requestType:\nreturn await process_multicall_request(request,connection,register,sub_container,pool=pool)\nelse:\n# logging.log(f\"\u5904\u7406\u8bf7\u6c42\u65f6,\u51fa\u73b0\u4e0d\u53d7\u652f\u6301\u7684\u8bf7\u6c42,\u8bf7\u6c42\u7684\u5185\u5bb9\uff1a{request}\")\nreturn True\nexcept Exception as e:\nraise e\n</code></pre>"},{"location":"api/handler/#utran.handler.process_rpc_request","title":"<code>process_rpc_request(request, connection, register, to_send=True, pool=None)</code>  <code>async</code>","text":""},{"location":"api/handler/#utran.handler.process_rpc_request--rpc","title":"\u5904\u7406rpc\u8bf7\u6c42","text":"<p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict</code> <p>\u8bf7\u6c42\u4f53</p> required <code>connection</code> <code>ClientConnection</code> <p>\u5ba2\u6237\u7aef\u8fde\u63a5</p> required <code>register</code> <code>Register</code> <p>\u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b</p> required <code>to_send</code> <code>bool</code> <p>\u662f\u5426\u6267\u884c\u53d1\u9001</p> <code>True</code>"},{"location":"api/handler/#utran.handler.process_rpc_request--response","title":"response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u672c\u6b21\u8bf7\u6c42\u7684id</p> <code>responseType</code> <code>str</code> <p>'rpc'</p> <code>state</code> <code>int</code> <p>\u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f</p> <code>methodName</code> <code>str</code> <p>\u9700\u8981\u6267\u884c\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u540d</p> <code>result</code> <code>any</code> <p>\u6267\u884c\u7ed3\u679c</p> <code>error</code> <code>str</code> <p>\u5931\u8d25\u4fe1\u606f\uff0c\u8ba2\u9605\u5931\u8d25\u65f6\u624d\u4f1a\u6709\u8be5\u9879 </p> <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5</p> Source code in <code>utran\\handler.py</code> <pre><code>async def process_rpc_request(request:UtRequest,connection:ClientConnection,register:Register,to_send:bool=True,pool:ProcessPoolExecutor=None)-&gt;bool:\n\"\"\"\n    # \u5904\u7406rpc\u8bf7\u6c42\n    Args:\n        request (dict): \u8bf7\u6c42\u4f53\n        connection (ClientConnection): \u5ba2\u6237\u7aef\u8fde\u63a5\n        register (Register): \u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b\n        to_send: \u662f\u5426\u6267\u884c\u53d1\u9001\n    ## response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193\n    Attributes:\n        id (int):  \u672c\u6b21\u8bf7\u6c42\u7684id\n        responseType (str): 'rpc'\n        state (int):  \u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f\n        methodName (str): \u9700\u8981\u6267\u884c\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u540d\n        result (any): \u6267\u884c\u7ed3\u679c\n        error (str): \u5931\u8d25\u4fe1\u606f\uff0c\u8ba2\u9605\u5931\u8d25\u65f6\u624d\u4f1a\u6709\u8be5\u9879 \n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5\n    \"\"\"\nmethod_name:str = request.methodName\nargs:tuple = request.args\ndicts:dict = request.dicts\nrm:RMethod = register.methods_of_rpc.get(method_name) if method_name else None\nresponse = UtResponse(id=request.id,\nstate=UtState.SUCCESS,\nmethodName=method_name,\nresponseType=request.requestType)\nif rm:\nstate,result,error = await rm.execute(args,dicts,pool)\nif state == UtState.FAILED:\nresponse.state = UtState.FAILED\nresponse.error = error\nelse:\nresponse.result = result\nelse:\nresponse.state = UtState.FAILED\nresponse.error = f'The rpc server does not have \"{method_name}\" methods. '\nif to_send:\nawait connection.send(response)\nreturn False\nelse:\nreturn response\n</code></pre>"},{"location":"api/handler/#utran.handler.process_subscribe_request","title":"<code>process_subscribe_request(request, connection, sub_container, to_send=True)</code>  <code>async</code>","text":""},{"location":"api/handler/#utran.handler.process_subscribe_request--subscribe","title":"\u5904\u7406subscribe\u8ba2\u9605\u8bf7\u6c42","text":"<p>Parameters:</p> Name Type Description Default <code>request</code> <code>UtRequest</code> <p>\u8bf7\u6c42\u4f53            </p> required <code>connection</code> <code>ClientConnection</code> <p>\u5ba2\u6237\u7aef\u8fde\u63a5</p> required <code>sub_container</code> <code>SubscriptionContainer</code> <p>\u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b</p> required <code>to_send</code> <code>bool</code> <p>\u662f\u5426\u6267\u884c\u53d1\u9001</p> <code>True</code>"},{"location":"api/handler/#utran.handler.process_subscribe_request--response","title":"response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u672c\u6b21\u8bf7\u6c42\u7684id</p> <code>responseType</code> <code>str</code> <p>'subscribe'</p> <code>state</code> <code>int</code> <p>\u8ba2\u9605\u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f</p> <code>result</code> <code>dict</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 {'subTopics':[\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684\u8bdd\u9898],'allTopics'[\u8be5\u8ba2\u9605\u8005\u6240\u6709\u8ba2\u9605\u7684\u8bdd\u9898]:}</p> <code>error</code> <code>str</code> <p>\u5931\u8d25\u4fe1\u606f\uff0c\u8ba2\u9605\u5931\u8d25\u65f6\u624d\u4f1a\u6709\u8be5\u9879</p> <code>methodName</code> <code>str</code> <p>None</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5\uff08\u8be5\u8bf7\u6c42\u7c7b\u578b\u4e0d\u4f1a\u7ed3\u675f\u8fde\u63a5\uff09</p> Source code in <code>utran\\handler.py</code> <pre><code>async def process_subscribe_request(request:UtRequest,connection:ClientConnection,sub_container:SubscriptionContainer,to_send:bool=True)-&gt;bool:\n\"\"\"\n    # \u5904\u7406subscribe\u8ba2\u9605\u8bf7\u6c42\n    Args:\n        request (UtRequest): \u8bf7\u6c42\u4f53            \n        connection (ClientConnection): \u5ba2\u6237\u7aef\u8fde\u63a5\n        sub_container (SubscriptionContainer): \u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b\n        to_send: \u662f\u5426\u6267\u884c\u53d1\u9001\n    ## response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193\n    Attributes:\n        id (int):  \u672c\u6b21\u8bf7\u6c42\u7684id\n        responseType (str): 'subscribe'\n        state (int):  \u8ba2\u9605\u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f\n        result (dict): \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 {'subTopics':[\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684\u8bdd\u9898],'allTopics'[\u8be5\u8ba2\u9605\u8005\u6240\u6709\u8ba2\u9605\u7684\u8bdd\u9898]:}\n        error (str): \u5931\u8d25\u4fe1\u606f\uff0c\u8ba2\u9605\u5931\u8d25\u65f6\u624d\u4f1a\u6709\u8be5\u9879\n        methodName (str): None\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5\uff08\u8be5\u8bf7\u6c42\u7c7b\u578b\u4e0d\u4f1a\u7ed3\u675f\u8fde\u63a5\uff09\n    \"\"\"\ntopics:list = request.topics    \nresponse = UtResponse(id=request.id,\nresponseType=UtType.SUBSCRIBE,\nstate=UtState.SUCCESS)\nisclose=False\nif not topics:\nresponse.state = UtState.FAILED\nresponse.result = dict(allTopics=connection.topics,subTopics=[])\nresponse.error = '\u6ca1\u6709\u6307\u5b9atopics'\nelse:\nif not sub_container.has_sub(connection.id):\nt_ = sub_container.add_sub(connection,topics)\nresponse.result = dict(allTopics=connection.topics,subTopics=t_)\nelse:\nt_ = sub_container.add_topic(connection.id,topics)\nresponse.result = dict(allTopics=connection.topics,subTopics=t_)\nif to_send:\nawait connection.send(response)\nreturn isclose\nelse:\nreturn response\n</code></pre>"},{"location":"api/handler/#utran.handler.process_unsubscribe_request","title":"<code>process_unsubscribe_request(request, connection, sub_container, to_send=True)</code>  <code>async</code>","text":""},{"location":"api/handler/#utran.handler.process_unsubscribe_request--unsubscribe","title":"\u5904\u7406unsubscribe\u53d6\u6d88\u8ba2\u9605\u8bf7\u6c42","text":"<p>Parameters:</p> Name Type Description Default <code>request</code> <code>UtRequest</code> <p>\u8bf7\u6c42\u4f53            </p> required <code>connection</code> <code>ClientConnection</code> <p>\u5ba2\u6237\u7aef\u8fde\u63a5</p> required <code>sub_container</code> <code>SubscriptionContainer</code> <p>\u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b</p> required <code>to_send</code> <code>bool</code> <p>\u662f\u5426\u6267\u884c\u53d1\u9001</p> <code>True</code>"},{"location":"api/handler/#utran.handler.process_unsubscribe_request--response","title":"response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u672c\u6b21\u8bf7\u6c42\u7684id</p> <code>responseType</code> <code>str</code> <p>'unsubscribe'</p> <code>state</code> <code>int</code> <p>\u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f        </p> <code>result</code> <code>dict</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 {'unSubTopics':[\u672c\u6b21\u6210\u529f\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898],'allTopics'[\u8be5\u8ba2\u9605\u8005\u6240\u6709\u8ba2\u9605\u7684\u8bdd\u9898]:}</p> <code>error</code> <code>str</code> <p>\u5931\u8d25\u4fe1\u606f</p> <code>methodName</code> <code>str</code> <p>None</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5</p> Source code in <code>utran\\handler.py</code> <pre><code>async def process_unsubscribe_request(request:UtRequest,connection:ClientConnection,sub_container:SubscriptionContainer,to_send:bool=True)-&gt;bool:\n\"\"\"\n    # \u5904\u7406unsubscribe\u53d6\u6d88\u8ba2\u9605\u8bf7\u6c42\n    Args:\n        request (UtRequest): \u8bf7\u6c42\u4f53            \n        connection (ClientConnection): \u5ba2\u6237\u7aef\u8fde\u63a5\n        sub_container (SubscriptionContainer): \u5b58\u653e\u8ba2\u9605\u8005\u7684\u5bb9\u5668\u5b9e\u4f8b\n        to_send: \u662f\u5426\u6267\u884c\u53d1\u9001\n    ## response \u54cd\u5e94\u4f53\u683c\u5f0f\u2193\n    Attributes:\n        id (int):  \u672c\u6b21\u8bf7\u6c42\u7684id\n        responseType (str): 'unsubscribe'\n        state (int):  \u72b6\u6001 0\u4e3a\u5931\u8d25\uff0c1\u4e3a\u6210\u529f        \n        result (dict): \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 {'unSubTopics':[\u672c\u6b21\u6210\u529f\u53d6\u6d88\u8ba2\u9605\u7684\u8bdd\u9898],'allTopics'[\u8be5\u8ba2\u9605\u8005\u6240\u6709\u8ba2\u9605\u7684\u8bdd\u9898]:}\n        error (str): \u5931\u8d25\u4fe1\u606f\n        methodName (str): None\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c,\u662f\u5426\u7ed3\u675f\u8fde\u63a5\n    \"\"\"\ntopics:list = request.topics\nresponse =UtResponse(id=request.id,responseType=request.requestType,state=UtState.SUCCESS)\nisclose=False\nif sub_container.has_sub(connection.id):\nt_ = sub_container.remove_topic(connection.id,topics)\nresponse.result = dict(unSubTopics=t_,allTopics=connection.topics)\nelse:\nresponse.state = UtState.FAILED\nresponse.error = '\u975e\u8ba2\u9605\u8005\uff0c\u65e0\u6cd5\u6267\u884c\u8be5\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5c06\u5173\u95ed\u8fde\u63a5\uff01'        \nisclose = True\nif to_send:\nawait connection.send(response)\nreturn isclose\nelse:\nreturn response\n</code></pre>"},{"location":"api/object/","title":"\u6570\u636e\u5bf9\u8c61","text":""},{"location":"api/object/#utran.object.BaseDataModel","title":"<code>BaseDataModel</code>","text":"<p>\u57fa\u7840\u6570\u636e\u6a21\u578b</p> Source code in <code>utran\\object.py</code> <pre><code>class BaseDataModel:\n\"\"\"\u57fa\u7840\u6570\u636e\u6a21\u578b\"\"\"\npass\n</code></pre>"},{"location":"api/object/#utran.object.ClientConnection","title":"<code>ClientConnection</code>","text":"<p>\u5ba2\u6237\u7aef\u8fde\u63a5</p> Source code in <code>utran\\object.py</code> <pre><code>class ClientConnection:\n\"\"\"\u5ba2\u6237\u7aef\u8fde\u63a5\"\"\"\n__slots__=('topics','sender','__id','_encrypt','_single_semaphore')\ndef __init__(self,sender:Union[StreamWriter,WebSocketResponse],encrypt:bool=False):\nself.topics = []\nself.__id = str(uuid.uuid4())\nself.sender = sender\nself._encrypt=encrypt\nself._single_semaphore = asyncio.Semaphore(1)\n@property\ndef id(self):\nreturn self.__id\nasync def send(self,response:UtResponse):\nasync with self._single_semaphore:     # \u6bcf\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u534f\u7a0b\u8c03\u7528send\u65b9\u6cd5     \nif isinstance(self.sender,StreamWriter):\nmsg = pack_data2_utran(response.id,response.responseType.value,response.to_dict(),self._encrypt)\nawait self.__send_by_sw(msg)\nelif isinstance(self.sender,WebSocketResponse):\nawait self.__send_by_ws(response.to_dict())\nelse:\nraise RuntimeError('Invalid sender, it must be an instance of StreamWriter or WebSocketResponse')\nasync def __send_by_sw(self,msg:bytes):        \nw:StreamWriter = self.sender\nw.write(msg)\nawait w.drain()\nasync def __send_by_ws(self,msg:dict):\nw:WebSocketResponse = self.sender\nawait w.send_str(ujson.dumps(msg))\ndef add_topic(self,topic:str)-&gt;Union[str,None]:\n\"\"\"# \u6dfb\u52a0\u6307\u5b9a\u7684topic\n        Returns:\n            \u8fd4\u56de\u6dfb\u52a0\u6210\u529f\u7684topic\n        \"\"\"\nif topic not in self.topics:\nself.topics.append(topic)\nreturn topic\ndef remove_topic(self,topic:str)-&gt;Union[str,None]:\n\"\"\"# \u79fb\u9664\u6307\u5b9a\u7684topic\n        Returns:\n            \u8fd4\u56de\u79fb\u9664\u6210\u529f\u7684topic\n        \"\"\"\nif topic in self.topics:\nself.topics.remove(topic)\nreturn  topic\n</code></pre>"},{"location":"api/object/#utran.object.ClientConnection.add_topic","title":"<code>add_topic(topic)</code>","text":""},{"location":"api/object/#utran.object.ClientConnection.add_topic--topic","title":"\u6dfb\u52a0\u6307\u5b9a\u7684topic","text":"<p>Returns:</p> Type Description <code>Union[str, None]</code> <p>\u8fd4\u56de\u6dfb\u52a0\u6210\u529f\u7684topic</p> Source code in <code>utran\\object.py</code> <pre><code>def add_topic(self,topic:str)-&gt;Union[str,None]:\n\"\"\"# \u6dfb\u52a0\u6307\u5b9a\u7684topic\n    Returns:\n        \u8fd4\u56de\u6dfb\u52a0\u6210\u529f\u7684topic\n    \"\"\"\nif topic not in self.topics:\nself.topics.append(topic)\nreturn topic\n</code></pre>"},{"location":"api/object/#utran.object.ClientConnection.remove_topic","title":"<code>remove_topic(topic)</code>","text":""},{"location":"api/object/#utran.object.ClientConnection.remove_topic--topic","title":"\u79fb\u9664\u6307\u5b9a\u7684topic","text":"<p>Returns:</p> Type Description <code>Union[str, None]</code> <p>\u8fd4\u56de\u79fb\u9664\u6210\u529f\u7684topic</p> Source code in <code>utran\\object.py</code> <pre><code>def remove_topic(self,topic:str)-&gt;Union[str,None]:\n\"\"\"# \u79fb\u9664\u6307\u5b9a\u7684topic\n    Returns:\n        \u8fd4\u56de\u79fb\u9664\u6210\u529f\u7684topic\n    \"\"\"\nif topic in self.topics:\nself.topics.remove(topic)\nreturn  topic\n</code></pre>"},{"location":"api/object/#utran.object.HeartBeat","title":"<code>HeartBeat</code>","text":"<p>         Bases: <code>Enum</code></p> <p>\u5fc3\u8df3</p> Source code in <code>utran\\object.py</code> <pre><code>class HeartBeat(Enum):\n\"\"\"\u5fc3\u8df3\"\"\"\nPING: bytes = b'PING\\n'\nPONG: bytes = b'PONG\\n'\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer","title":"<code>SubscriptionContainer</code>","text":""},{"location":"api/object/#utran.object.SubscriptionContainer--_1","title":"\u5b58\u653e\u8ba2\u9605\u8005\u548c\u8ba2\u9605\u8bdd\u9898\u7684\u5bb9\u5668","text":"Source code in <code>utran\\object.py</code> <pre><code>class SubscriptionContainer:\n\"\"\"\n    # \u5b58\u653e\u8ba2\u9605\u8005\u548c\u8ba2\u9605\u8bdd\u9898\u7684\u5bb9\u5668\n    \"\"\"\n__slots__=('__subscribes','__topics') \ndef __init__(self) -&gt; None:\nself.__subscribes = dict()   # {\u5ba2\u6237\u7aefid1:{writer:writer,topics:[\u8bdd\u98981,\u8bdd\u98982,...]},\u5ba2\u6237\u7aefid2:{writer:writer,topics:[\u8bdd\u98981,...]}}\nself.__topics = dict()       # {\u8bdd\u98981:[\u5ba2\u6237\u7aefid1,\u5ba2\u6237\u7aefid2,..],\u8bdd\u98982:[\u5ba2\u6237\u7aefid1,..]}     \ndef has_sub(self,subId:str):\n\"\"\"\u6307\u5b9aid \u67e5\u8be2\u8ba2\u9605\u8005\u662f\u5426\u5b58\u5728\"\"\"\nif subId in self.__subscribes:\nreturn True\nreturn False\ndef add_sub(self,cc:ClientConnection,topics:Union[str,list]=None)-&gt;Union[List[str],None]:\n\"\"\"# \u6dfb\u52a0\u8ba2\u9605\u8005\n        Returns:\n            \u8fd4\u56de\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684topic   \n        \"\"\"\nif cc.id not in self.__subscribes:\nself.__subscribes[cc.id] = cc\nif topics != None:\nreturn self.add_topic(cc.id,topics)\ndef add_sub_by_id(self,subId:str,sender:Union[StreamWriter,WebSocketResponse],topic:Union[str,list]=None):\n\"\"\"\u901a\u8fc7id\u6dfb\u52a0\u8ba2\u9605\u8005\"\"\"\nif subId not in self.__subscribes:\nself.__subscribes[subId]= ClientConnection(subId,sender)\nif topic != None:\nself.add_topic(subId,topic)\ndef del_sub(self,subId:str):\n\"\"\"\u5220\u9664\u8ba2\u9605\u8005,\u6210\u529f\u8fd4\u56de\u8ba2\u9605\u8005\uff0c\u5426\u5219\u8fd4\u56deNone\"\"\"\ns:ClientConnection = self.__subscribes.get(subId)\nif s:\nif len(s.topics)&gt;0:\nfor topic in s.topics:\nif self.__topics.get(topic) and subId in self.__topics[topic]:\nself.__topics[topic].remove(subId)\nreturn self.__subscribes.pop(subId)\ndef add_topic(self,subId:str,topic:Union[str,list])-&gt;list:\n\"\"\"# \u4e3a\u8ba2\u9605\u8005\uff0c\u589e\u52a0\u8ba2\u9605\u8bdd\u9898\n        \u6ce8: topic \u4f1a\u88ab\u8f6c\u4e3a\u7eaf\u5c0f\u5199\n        Returns:\n            \u8fd4\u56de\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684topic        \n        \"\"\"\nok = []\nif type(topic) in [list,tuple]:\nfor t in topic:\nt_ = self.add_topic(subId,t)\nif t_: ok.append(t_)\nelse:\ntopic = topic.lower().strip()\nif not topic: return\ns:ClientConnection = self.__subscribes.get(subId)\nif s:                \nif topic not in self.__topics:\nself.__topics[topic] = []\nif subId not in self.__topics[topic]:\nself.__topics[topic].append(subId)\nreturn s.add_topic(topic)\nelse:\nraise ValueError('\u8ba2\u9605\u8005\u4e0d\u5b58\u5728')\nreturn ok\ndef remove_topic(self,subId:str,topic:Union[str,list])-&gt;List[str]:\n\"\"\"# \u4e3a\u8ba2\u9605\u8005\uff0c\u5220\u9664\u67d0\u4e9b\u8ba2\u9605\u8bdd\u9898\n        Returns:\n            \u8fd4\u56de\u672c\u6b21\u79fb\u9664\u6210\u529f\u7684topic\n        \"\"\"\nok = []\nif type(topic) in [list,tuple]:\nfor t in topic:\nt_ = self.remove_topic(subId,t)\nif t_: \nok.append(t_)\nelse:  \ntopic = topic.lower().strip()\nif not topic: return\ns:ClientConnection = self.__subscribes.get(subId)\nif s:\nsubIds:list = self.__topics.get(topic) or []\nif s.id in subIds:\nself.__topics[topic].remove(s.id)\nreturn s.remove_topic(topic)\nelse:\nraise ValueError('\u8ba2\u9605\u8005\u4e0d\u5b58\u5728')\nreturn ok\ndef get_sub_by_id(self,subId:str)-&gt;ClientConnection:\n\"\"\"\u901a\u8fc7id\u83b7\u53d6\u8ba2\u9605\u8005\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u5b9e\u4f8b\"\"\"\nreturn self.__subscribes.get(subId)\ndef get_subId_by_topic(self,topic:str)-&gt;list:\n\"\"\"\u83b7\u53d6\u6307\u5b9a\u8bdd\u9898\u4e0b\u6240\u6709\u7684\u8ba2\u9605\u8005\u7684id\"\"\"\nall_subId:list = self.__topics.get(topic.lower().strip())\nall_subId = all_subId or []\nreturn all_subId\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.add_sub","title":"<code>add_sub(cc, topics=None)</code>","text":""},{"location":"api/object/#utran.object.SubscriptionContainer.add_sub--_1","title":"\u6dfb\u52a0\u8ba2\u9605\u8005","text":"<p>Returns:</p> Type Description <code>Union[List[str], None]</code> <p>\u8fd4\u56de\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684topic</p> Source code in <code>utran\\object.py</code> <pre><code>def add_sub(self,cc:ClientConnection,topics:Union[str,list]=None)-&gt;Union[List[str],None]:\n\"\"\"# \u6dfb\u52a0\u8ba2\u9605\u8005\n    Returns:\n        \u8fd4\u56de\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684topic   \n    \"\"\"\nif cc.id not in self.__subscribes:\nself.__subscribes[cc.id] = cc\nif topics != None:\nreturn self.add_topic(cc.id,topics)\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.add_sub_by_id","title":"<code>add_sub_by_id(subId, sender, topic=None)</code>","text":"<p>\u901a\u8fc7id\u6dfb\u52a0\u8ba2\u9605\u8005</p> Source code in <code>utran\\object.py</code> <pre><code>def add_sub_by_id(self,subId:str,sender:Union[StreamWriter,WebSocketResponse],topic:Union[str,list]=None):\n\"\"\"\u901a\u8fc7id\u6dfb\u52a0\u8ba2\u9605\u8005\"\"\"\nif subId not in self.__subscribes:\nself.__subscribes[subId]= ClientConnection(subId,sender)\nif topic != None:\nself.add_topic(subId,topic)\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.add_topic","title":"<code>add_topic(subId, topic)</code>","text":""},{"location":"api/object/#utran.object.SubscriptionContainer.add_topic--_1","title":"\u4e3a\u8ba2\u9605\u8005\uff0c\u589e\u52a0\u8ba2\u9605\u8bdd\u9898","text":"<p>\u6ce8: topic \u4f1a\u88ab\u8f6c\u4e3a\u7eaf\u5c0f\u5199</p> <p>Returns:</p> Type Description <code>list</code> <p>\u8fd4\u56de\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684topic</p> Source code in <code>utran\\object.py</code> <pre><code>def add_topic(self,subId:str,topic:Union[str,list])-&gt;list:\n\"\"\"# \u4e3a\u8ba2\u9605\u8005\uff0c\u589e\u52a0\u8ba2\u9605\u8bdd\u9898\n    \u6ce8: topic \u4f1a\u88ab\u8f6c\u4e3a\u7eaf\u5c0f\u5199\n    Returns:\n        \u8fd4\u56de\u672c\u6b21\u6210\u529f\u8ba2\u9605\u7684topic        \n    \"\"\"\nok = []\nif type(topic) in [list,tuple]:\nfor t in topic:\nt_ = self.add_topic(subId,t)\nif t_: ok.append(t_)\nelse:\ntopic = topic.lower().strip()\nif not topic: return\ns:ClientConnection = self.__subscribes.get(subId)\nif s:                \nif topic not in self.__topics:\nself.__topics[topic] = []\nif subId not in self.__topics[topic]:\nself.__topics[topic].append(subId)\nreturn s.add_topic(topic)\nelse:\nraise ValueError('\u8ba2\u9605\u8005\u4e0d\u5b58\u5728')\nreturn ok\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.del_sub","title":"<code>del_sub(subId)</code>","text":"<p>\u5220\u9664\u8ba2\u9605\u8005,\u6210\u529f\u8fd4\u56de\u8ba2\u9605\u8005\uff0c\u5426\u5219\u8fd4\u56deNone</p> Source code in <code>utran\\object.py</code> <pre><code>def del_sub(self,subId:str):\n\"\"\"\u5220\u9664\u8ba2\u9605\u8005,\u6210\u529f\u8fd4\u56de\u8ba2\u9605\u8005\uff0c\u5426\u5219\u8fd4\u56deNone\"\"\"\ns:ClientConnection = self.__subscribes.get(subId)\nif s:\nif len(s.topics)&gt;0:\nfor topic in s.topics:\nif self.__topics.get(topic) and subId in self.__topics[topic]:\nself.__topics[topic].remove(subId)\nreturn self.__subscribes.pop(subId)\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.get_subId_by_topic","title":"<code>get_subId_by_topic(topic)</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u8bdd\u9898\u4e0b\u6240\u6709\u7684\u8ba2\u9605\u8005\u7684id</p> Source code in <code>utran\\object.py</code> <pre><code>def get_subId_by_topic(self,topic:str)-&gt;list:\n\"\"\"\u83b7\u53d6\u6307\u5b9a\u8bdd\u9898\u4e0b\u6240\u6709\u7684\u8ba2\u9605\u8005\u7684id\"\"\"\nall_subId:list = self.__topics.get(topic.lower().strip())\nall_subId = all_subId or []\nreturn all_subId\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.get_sub_by_id","title":"<code>get_sub_by_id(subId)</code>","text":"<p>\u901a\u8fc7id\u83b7\u53d6\u8ba2\u9605\u8005\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u5b9e\u4f8b</p> Source code in <code>utran\\object.py</code> <pre><code>def get_sub_by_id(self,subId:str)-&gt;ClientConnection:\n\"\"\"\u901a\u8fc7id\u83b7\u53d6\u8ba2\u9605\u8005\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u5b9e\u4f8b\"\"\"\nreturn self.__subscribes.get(subId)\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.has_sub","title":"<code>has_sub(subId)</code>","text":"<p>\u6307\u5b9aid \u67e5\u8be2\u8ba2\u9605\u8005\u662f\u5426\u5b58\u5728</p> Source code in <code>utran\\object.py</code> <pre><code>def has_sub(self,subId:str):\n\"\"\"\u6307\u5b9aid \u67e5\u8be2\u8ba2\u9605\u8005\u662f\u5426\u5b58\u5728\"\"\"\nif subId in self.__subscribes:\nreturn True\nreturn False\n</code></pre>"},{"location":"api/object/#utran.object.SubscriptionContainer.remove_topic","title":"<code>remove_topic(subId, topic)</code>","text":""},{"location":"api/object/#utran.object.SubscriptionContainer.remove_topic--_1","title":"\u4e3a\u8ba2\u9605\u8005\uff0c\u5220\u9664\u67d0\u4e9b\u8ba2\u9605\u8bdd\u9898","text":"<p>Returns:</p> Type Description <code>List[str]</code> <p>\u8fd4\u56de\u672c\u6b21\u79fb\u9664\u6210\u529f\u7684topic</p> Source code in <code>utran\\object.py</code> <pre><code>def remove_topic(self,subId:str,topic:Union[str,list])-&gt;List[str]:\n\"\"\"# \u4e3a\u8ba2\u9605\u8005\uff0c\u5220\u9664\u67d0\u4e9b\u8ba2\u9605\u8bdd\u9898\n    Returns:\n        \u8fd4\u56de\u672c\u6b21\u79fb\u9664\u6210\u529f\u7684topic\n    \"\"\"\nok = []\nif type(topic) in [list,tuple]:\nfor t in topic:\nt_ = self.remove_topic(subId,t)\nif t_: \nok.append(t_)\nelse:  \ntopic = topic.lower().strip()\nif not topic: return\ns:ClientConnection = self.__subscribes.get(subId)\nif s:\nsubIds:list = self.__topics.get(topic) or []\nif s.id in subIds:\nself.__topics[topic].remove(s.id)\nreturn s.remove_topic(topic)\nelse:\nraise ValueError('\u8ba2\u9605\u8005\u4e0d\u5b58\u5728')\nreturn ok\n</code></pre>"},{"location":"api/object/#utran.object.UtRequest","title":"<code>UtRequest</code>","text":""},{"location":"api/object/#utran.object.UtRequest--rpc","title":"Rpc\u8bf7\u6c42\u4f53","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u8bf7\u6c42\u4f53id</p> <code>requestType</code> <code>str</code> <p>\u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b</p> <code>methodName</code> <code>str</code> <p>\u8c03\u7528\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u540d</p> <code>args</code> <code>str</code> <p>\u5217\u8868\u53c2\u6570</p> <code>dicts</code> <code>dict</code> <p>\u5b57\u5178\u53c2\u6570</p>"},{"location":"api/object/#utran.object.UtRequest--subscribe","title":"Subscribe\u8bf7\u6c42\u4f53","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u8bf7\u6c42\u4f53id</p> <code>requestType</code> <code>str</code> <p>\u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b</p> <code>topics</code> <code>Tuple[str]</code> <p>\u53ef\u4ee5\u540c\u65f6\u8ba2\u9605\u4e00\u4e2a\u6216\u591a\u4e2a\u8bdd\u9898</p>"},{"location":"api/object/#utran.object.UtRequest--unsubscribe","title":"Unsubscribe\u8bf7\u6c42\u4f53","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u8bf7\u6c42\u4f53id</p> <code>requestType</code> <code>str</code> <p>\u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b</p> <code>topics</code> <code>Tuple[str]</code> <p>\u53ef\u4ee5\u540c\u65f6\u53d6\u6d88\u8ba2\u9605\u4e00\u4e2a\u6216\u591a\u4e2a\u8bdd\u9898</p>"},{"location":"api/object/#utran.object.UtRequest--publish","title":"Publish\u8bf7\u6c42\u4f53","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u8bf7\u6c42\u4f53id</p> <code>requestType</code> <code>str</code> <p>\u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b</p> <code>topics</code> <code>Tuple[str]</code> <p>\u8bdd\u9898</p> <code>msg</code> <code>any</code> <p>\u8bdd\u9898\u6d88\u606f</p>"},{"location":"api/object/#utran.object.UtRequest--multiple","title":"multiple\u8bf7\u6c42\u4f53","text":"<p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>\u8bf7\u6c42\u4f53id</p> <code>requestType</code> <code>str</code> <p>\u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b</p> <code>multiple</code> <code>List[dict]</code> <p>\u591a\u6b21\u7684\u8bf7\u6c42\u4f53,\u5176\u4e2ddict\u662f\u5bf9\u5e94\u7c7b\u578b\u7684\u8bf7\u6c42\u4f53\u7684\u5b57\u5178</p> Source code in <code>utran\\object.py</code> <pre><code>class UtRequest:\n\"\"\"\n    ## Rpc\u8bf7\u6c42\u4f53\n    Attributes:\n        id (int): \u8bf7\u6c42\u4f53id\n        requestType (str): \u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b\n        methodName (str): \u8c03\u7528\u7684\u65b9\u6cd5\u6216\u51fd\u6570\u540d\n        args (str): \u5217\u8868\u53c2\u6570\n        dicts (dict): \u5b57\u5178\u53c2\u6570\n    ## Subscribe\u8bf7\u6c42\u4f53\n    Attributes:\n        id (int): \u8bf7\u6c42\u4f53id\n        requestType (str): \u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b\n        topics (Tuple[str]): \u53ef\u4ee5\u540c\u65f6\u8ba2\u9605\u4e00\u4e2a\u6216\u591a\u4e2a\u8bdd\u9898\n    ## Unsubscribe\u8bf7\u6c42\u4f53\n    Attributes:\n        id (int): \u8bf7\u6c42\u4f53id\n        requestType (str): \u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b\n        topics (Tuple[str]): \u53ef\u4ee5\u540c\u65f6\u53d6\u6d88\u8ba2\u9605\u4e00\u4e2a\u6216\u591a\u4e2a\u8bdd\u9898\n    ## Publish\u8bf7\u6c42\u4f53\n    Attributes:\n        id (int): \u8bf7\u6c42\u4f53id\n        requestType (str): \u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b\n        topics (Tuple[str]): \u8bdd\u9898\n        msg (any): \u8bdd\u9898\u6d88\u606f\n    ## multiple\u8bf7\u6c42\u4f53\n    Attributes:\n        id (int): \u8bf7\u6c42\u4f53id\n        requestType (str): \u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b\n        multiple (List[dict]): \u591a\u6b21\u7684\u8bf7\u6c42\u4f53,\u5176\u4e2ddict\u662f\u5bf9\u5e94\u7c7b\u578b\u7684\u8bf7\u6c42\u4f53\u7684\u5b57\u5178\n    \"\"\"\n__slots__ = ('id', 'requestType', 'methodName', 'args', 'dicts','topics','msg','multiple','encrypt')\ndef __init__(self,\nid:int,\nrequestType: Union[UtType,str],\n*,\nmethodName:str = None,\nargs: Union[tuple, list] = field(default_factory=tuple),\ndicts: dict = field(default_factory=lambda: defaultdict(list)),\ntopics: Union[tuple[str],str] = tuple(),\nmsg:any = None,\nmultiple:list[dict] = [],\nencrypt:bool = False,\n) -&gt; None:\nself.id = id\nself.requestType = convert2_UtType(requestType)\nself.methodName = methodName\nself.args = args\nself.dicts = dicts\nself.topics = tuple(topics) if type(topics) == list or type(topics) == tuple else (topics,)\nself.msg = msg\nself.encrypt = encrypt\nself.multiple = multiple\ndef __repr__(self) -&gt; str:\nreturn '&lt;UtRequest&gt;' + self.__str__\ndef __str__(self) -&gt; str:\ns = f' requestType:{self.requestType.value},id:{self.id},encrypt:{self.encrypt}'\nif self.requestType == UtType.RPC:\nreturn s+f',methodName:{self.methodName}'\nif self.requestType == UtType.MULTICALL:\nreturn s+f',nums:{len(self.multiple)}'\nif self.requestType == UtType.UNSUBSCRIBE or self.requestType == UtType.SUBSCRIBE or self.requestType == UtType.PUBLISH:\nreturn s+f',topics:{self.topics}'\ndef to_dict(self):\n\"\"\"\u8f6c\u4e3a\u5b57\u5178\"\"\"\nif self.requestType == UtType.RPC:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\nmethodName=self.methodName,\nargs=self.args,\ndicts=self.dicts)\nelif self.requestType == UtType.SUBSCRIBE:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\ntopics=self.topics)\nelif self.requestType == UtType.UNSUBSCRIBE:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\ntopics=self.topics)\nelif self.requestType == UtType.PUBLISH:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\ntopics=self.topics,\nmsg=self.msg)\nelif self.requestType == UtType.MULTICALL:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\nmultiple=self.multiple)\ndef pick_utran_request(self):\n\"\"\"\u751f\u6210\u7b26\u5408utran\u534f\u8bae\u7684\u8bf7\u6c42\u6570\u636e\"\"\"\nreturn pack_data2_utran(self.id,self.requestType.value,self.to_dict(),self.encrypt)\n</code></pre>"},{"location":"api/object/#utran.object.UtRequest.pick_utran_request","title":"<code>pick_utran_request()</code>","text":"<p>\u751f\u6210\u7b26\u5408utran\u534f\u8bae\u7684\u8bf7\u6c42\u6570\u636e</p> Source code in <code>utran\\object.py</code> <pre><code>def pick_utran_request(self):\n\"\"\"\u751f\u6210\u7b26\u5408utran\u534f\u8bae\u7684\u8bf7\u6c42\u6570\u636e\"\"\"\nreturn pack_data2_utran(self.id,self.requestType.value,self.to_dict(),self.encrypt)\n</code></pre>"},{"location":"api/object/#utran.object.UtRequest.to_dict","title":"<code>to_dict()</code>","text":"<p>\u8f6c\u4e3a\u5b57\u5178</p> Source code in <code>utran\\object.py</code> <pre><code>def to_dict(self):\n\"\"\"\u8f6c\u4e3a\u5b57\u5178\"\"\"\nif self.requestType == UtType.RPC:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\nmethodName=self.methodName,\nargs=self.args,\ndicts=self.dicts)\nelif self.requestType == UtType.SUBSCRIBE:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\ntopics=self.topics)\nelif self.requestType == UtType.UNSUBSCRIBE:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\ntopics=self.topics)\nelif self.requestType == UtType.PUBLISH:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\ntopics=self.topics,\nmsg=self.msg)\nelif self.requestType == UtType.MULTICALL:\nreturn dict(id=self.id,\nrequestType=self.requestType.value,\nmultiple=self.multiple)\n</code></pre>"},{"location":"api/object/#utran.object.UtResponse","title":"<code>UtResponse</code>","text":""},{"location":"api/object/#utran.object.UtResponse--_1","title":"\u54cd\u5e94\u4f53","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>\u8bf7\u6c42\u4f53id</p> required <code>requestType</code> <code>str</code> <p>\u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b</p> required <code>state</code> <code>int</code> <p>0\u662f\u5931\u8d25\uff0c1\u662f\u6210\u529f </p> required <code>methodName</code> <code>Union[str, None]</code> <p>\u672c\u6b21\u88ab\u8bf7\u6c42\u7684\u65b9\u6cd5\u6216\u51fd\u6570\uff0c\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605\u65f6\u6b64\u53c2\u6570\u4e3aNone</p> <code>None</code> <code>result</code> <code>any</code> <p>\u6267\u884c\u7684\u7ed3\u679c</p> <code>None</code> <code>error</code> <code>str</code> <p>\u5b58\u653e\u9519\u8bef\u5f02\u5e38\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e3a''\u7a7a\u5b57\u7b26\u4e32</p> <code>''</code> \u4e0d\u540c\u54cd\u5e94\u7684result\u503c publish subscribe unsubscribe {'topic':\u8bdd\u9898,'msg':\u8bdd\u9898\u6d88\u606f} {'allTopics': ['\u8bdd\u98981','\u8bdd\u98982'], 'subTopics': ['\u8bdd\u98982']} {'allTopics': ['\u8bdd\u98981'], 'unSubTopics': ['\u8bdd\u98982']} Source code in <code>utran\\object.py</code> <pre><code>class UtResponse:\n\"\"\"# \u54cd\u5e94\u4f53\n    Args:\n        id (int): \u8bf7\u6c42\u4f53id\n        requestType (str): \u6807\u8bb0\u8bf7\u6c42\u7c7b\u578b\n        state (int): 0\u662f\u5931\u8d25\uff0c1\u662f\u6210\u529f \n        methodName (Union[str,None]): \u672c\u6b21\u88ab\u8bf7\u6c42\u7684\u65b9\u6cd5\u6216\u51fd\u6570\uff0c\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605\u65f6\u6b64\u53c2\u6570\u4e3aNone\n        result (any): \u6267\u884c\u7684\u7ed3\u679c\n        error (str): \u5b58\u653e\u9519\u8bef\u5f02\u5e38\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e3a''\u7a7a\u5b57\u7b26\u4e32\n    \u4e0d\u540c\u54cd\u5e94\u7684result\u503c:\n        |publish                     |subscribe                                              |unsubscribe|\n        |-|-|-|\n        |{'topic':\u8bdd\u9898,'msg':\u8bdd\u9898\u6d88\u606f}|{'allTopics': ['\u8bdd\u98981','\u8bdd\u98982'], 'subTopics': ['\u8bdd\u98982']}|{'allTopics': ['\u8bdd\u98981'], 'unSubTopics': ['\u8bdd\u98982']}|\n    \"\"\"\n__slots__ = ('id', 'responseType', 'state',\n'methodName', 'result', 'error')\ndef __init__(self,\nid: int,\nresponseType: Union[UtType,str],\nstate: UtState,\nmethodName: Union[str, None] = None,\nresult: any = None,\nerror: str = '') -&gt; None:\nself.id = id\nself.responseType = convert2_UtType(responseType)\nself.state = convert2_UtState(state)\nself.methodName = methodName\nself.result = result\nself.error = error\ndef to_dict(self):\n\"\"\"\u8f6c\u4e3a\u5b57\u5178\"\"\"\nif self.responseType == UtType.RPC:\nif self.state == UtState.SUCCESS:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nmethodName=self.methodName,\nresult=self.result)\nelse:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nmethodName=self.methodName,\nresult=self.result,\nerror=self.error)\nelse:\nif self.state == UtState.SUCCESS:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nresult=self.result)\nelse:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nresult=self.result,\nerror=self.error)\n</code></pre>"},{"location":"api/object/#utran.object.UtResponse.to_dict","title":"<code>to_dict()</code>","text":"<p>\u8f6c\u4e3a\u5b57\u5178</p> Source code in <code>utran\\object.py</code> <pre><code>def to_dict(self):\n\"\"\"\u8f6c\u4e3a\u5b57\u5178\"\"\"\nif self.responseType == UtType.RPC:\nif self.state == UtState.SUCCESS:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nmethodName=self.methodName,\nresult=self.result)\nelse:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nmethodName=self.methodName,\nresult=self.result,\nerror=self.error)\nelse:\nif self.state == UtState.SUCCESS:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nresult=self.result)\nelse:\nreturn dict(\nid=self.id,\nresponseType=self.responseType.value,\nstate=self.state.value,\nresult=self.result,\nerror=self.error)\n</code></pre>"},{"location":"api/object/#utran.object.UtState","title":"<code>UtState</code>","text":"<p>         Bases: <code>Enum</code></p> <p>\u72b6\u6001</p> Source code in <code>utran\\object.py</code> <pre><code>class UtState(Enum):\n\"\"\"\u72b6\u6001\"\"\"\nFAILED: int = 0\nSUCCESS: int = 1\n</code></pre>"},{"location":"api/object/#utran.object.UtType","title":"<code>UtType</code>","text":"<p>         Bases: <code>Enum</code></p> <p>\u8bf7\u6c42\u6216\u54cd\u5e94\u7684\u7c7b\u578b</p> Source code in <code>utran\\object.py</code> <pre><code>class UtType(Enum):\n\"\"\"\u8bf7\u6c42\u6216\u54cd\u5e94\u7684\u7c7b\u578b\"\"\"\nGET: str = 'get'\nRPC: str = 'rpc'\nPOST: str = 'post'\nSUBSCRIBE: str = 'subscribe'\nUNSUBSCRIBE: str = 'unsubscribe'\nPUBLISH: str = 'publish'\nMULTICALL: str = 'multicall'\n</code></pre>"},{"location":"api/object/#utran.object.create_UtRequest","title":"<code>create_UtRequest(msg, id=None, encrypt=False)</code>","text":""},{"location":"api/object/#utran.object.create_UtRequest--utrequest","title":"\u751f\u6210UtRequest\u5b9e\u4f8b","text":"<p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Union[dict, list[dict]]</code> <p>\u5b8c\u6574\u8bf7\u6c42\u4f53\u7684\u5b57\u5178\u5f62\u5f0f(\u6ca1\u6709id\u503c),\u5f53\u4e3alist[dict]\u65f6\uff0c\u4f1a\u6253\u5305\u6210\u4e00\u4e2amultiple\u8bf7\u6c42\u3002</p> required <code>id</code> <p>\u53ef\u9009\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9aid\uff0c\u4f1a\u81ea\u52a8\u751f\u6210</p> <code>None</code> <code>encrypt</code> <p>\u662f\u5426\u52a0\u5bc6\u4f20\u8f93\u6570\u636e</p> <code>False</code> Source code in <code>utran\\object.py</code> <pre><code>def create_UtRequest(msg:Union[dict,list[dict]],id=None,encrypt=False)-&gt;UtRequest:\n\"\"\"# \u751f\u6210UtRequest\u5b9e\u4f8b\n    Args:\n        msg: \u5b8c\u6574\u8bf7\u6c42\u4f53\u7684\u5b57\u5178\u5f62\u5f0f(\u6ca1\u6709id\u503c),\u5f53\u4e3alist[dict]\u65f6\uff0c\u4f1a\u6253\u5305\u6210\u4e00\u4e2amultiple\u8bf7\u6c42\u3002\n        id: \u53ef\u9009\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9aid\uff0c\u4f1a\u81ea\u52a8\u751f\u6210\n        encrypt: \u662f\u5426\u52a0\u5bc6\u4f20\u8f93\u6570\u636e\n    \"\"\"\ndef gen_request_dict(msg:Union[dict,list[dict]],id=None)-&gt;dict:\nid = id or gen_requestId()\nif type(msg)==list:\nmultiple = [gen_request_dict(m,id=id) for m in msg]\nmsg = dict(id=id,requestType=UtType.MULTICALL.value,multiple=multiple)        \nelif type(msg)==dict:\nmsg['id'] = id\nreturn msg\nelif type(msg)==bytes:\nmsg = msg[:1]+f'\"id\":{id},'.encode()+msg[1:]\nelse:\nraise ValueError('\"msg\" must be a dict type!')\nreturn msg\nres:dict = gen_request_dict(msg,id)\nres['encrypt'] = encrypt\nreturn UtRequest(**res)\n</code></pre>"},{"location":"api/object/#utran.object.gen_requestId","title":"<code>gen_requestId()</code>","text":"<p>\u751f\u6210\u8bf7\u6c42\u5168\u5c40\u552f\u4e00\u7684id</p> Source code in <code>utran\\object.py</code> <pre><code>def gen_requestId()-&gt;int:\n\"\"\"\u751f\u6210\u8bf7\u6c42\u5168\u5c40\u552f\u4e00\u7684id\"\"\"\nglobal REQUEST_ID\nREQUEST_ID+=1\nreturn REQUEST_ID\n</code></pre>"},{"location":"api/register/","title":"\u6ce8\u518c\u7c7b","text":"<p>\u6ce8\u518c\u793a\u4f8b<pre><code>import utran\nfrom utran.server import Server\nserver = Server()\n# 1.\u666e\u901a\u6ce8\u518c\u7528\u6cd5\nserver.register.rpc(add,name='puls')\n# 2.\u7c7b\u7684\u6ce8\u518c,\u540d\u79f0\u6216\u8def\u5f84\u5fc5\u586b\n@server.register.get(path='/mycalc',ins_args=(1,2))\n@server.register.rpc(name='mycalc')\nclass MyCalc:\ndef __init__(self,a,b):\nself.a=a\nself.b=b\ndef add(self,a:float,b:float):\nreturn a+b\ndef sub(self,a:float,b:float):\nreturn a-b\n# 3.\u7c7b\u7684\u5b9e\u4f8b\u6ce8\u518c\nmycalc = MyCalc(2,3)\nserver.register.rpc(mycalc,name='mycalc2')\n# 4.\u5b9e\u4f8b\u65b9\u6cd5\u6ce8\u518c\nserver.register.rpc(mycalc.add,name='mycalc_add')\n# 5.\u88c5\u9970\u5668\u7528\u6cd5\n@server.register.rpc(useProcess=True)       # \u6dfb\u52a0\u9009\u9879\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\n@server.register.post(useProcess=True)\n@server.register.get(useProcess=True)\n@server.register.rpc(name='calc_puls')      # \u6307\u5b9a\u6ce8\u518c\u7684\u540d\u79f0\u548c\u8def\u5f84\n@server.register.post(path='/calc_puls')\n@server.register.get(path='/calc_puls')\n@server.register.rpc()                      # \u51fd\u6570\u5f0f\u65e0\u53c2\uff0c\u4f7f\u7528\u51fd\u6570\u540d\u79f0\u8fdb\u884c\u6ce8\u518c\n@server.register.post()\n@server.register.get()\n@server.register.rpc                        # \u5c5e\u6027\u5f0f\uff0c\u5c06\u4f7f\u7528\u51fd\u6570\u540d\u79f0\u8fdb\u884c\u6ce8\u518c\n@server.register.post\n@server.register.get\nasync def add(a:int,b:int):\nreturn a+b\nutran.run(server,host='127.0.0.1',port=8081,web_port=8080)\n</code></pre> </p>"},{"location":"api/register/#utran.register.RMethod","title":"<code>RMethod</code>","text":""},{"location":"api/register/#utran.register.RMethod--_1","title":"\u5b58\u653e\u6ce8\u518c\u65b9\u6cd5\u7684\u6570\u636e\u7c7b","text":"<p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>\u540d\u79f0\u6216\u8def\u5f84</p> <code>methodType</code> <code>str</code> <p>\u7c7b\u578b GET / POST / RPC</p> <code>callable</code> <code>callable</code> <p>\u53ef\u8c03\u7528\u7684\u65b9\u6cd5/\u51fd\u6570</p> <code>checkParams</code> <code>bool</code> <p>\u662f\u5426\u68c0\u67e5\u53c2\u6570</p> <code>checkReturn</code> <code>bool</code> <p>\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c</p> <code>cls</code> <code>str</code> <p>\u7c7b\u540d\uff0c\u7c7b\u65b9\u6cd5\u624d\u4f1a\u6709</p> <code>doc</code> <code>str</code> <p>\u63cf\u8ff0</p> <code>params</code> <code>tuple</code> <p>\u53c2\u6570</p> <code>default_values</code> <code>tuple</code> <p>\u53c2\u6570\u9ed8\u8ba4\u503c</p> <code>annotations</code> <code>dict</code> <p>\u7c7b\u578b\u58f0\u660e</p> <code>varargs</code> <code>str</code> <p>\u53c2\u6570\u4e2d*args\u7684\u540d\u79f0</p> <code>varkw</code> <code>str</code> <p>\u53c2\u6570\u4e2d**dicts\u7684\u540d\u79f0</p> <code>returnType</code> <code>str</code> <p>\u8fd4\u56de\u503c\u7684\u7c7b\u578b</p> <code>asyncfunc</code> <code>bool</code> <p>\u662f\u5426\u4e3a\u5f02\u6b65\u51fd\u6570\u6216\u65b9\u6cd5</p> Source code in <code>utran\\register.py</code> <pre><code>class RMethod:\n\"\"\"\n    #\u5b58\u653e\u6ce8\u518c\u65b9\u6cd5\u7684\u6570\u636e\u7c7b\n    Attributes:\n        name (str): \u540d\u79f0\u6216\u8def\u5f84\n        methodType (str): \u7c7b\u578b GET / POST / RPC\n        callable (callable): \u53ef\u8c03\u7528\u7684\u65b9\u6cd5/\u51fd\u6570\n        checkParams (bool): \u662f\u5426\u68c0\u67e5\u53c2\u6570\n        checkReturn (bool): \u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\n        cls (str): \u7c7b\u540d\uff0c\u7c7b\u65b9\u6cd5\u624d\u4f1a\u6709\n        doc (str): \u63cf\u8ff0\n        params (tuple): \u53c2\u6570\n        default_values (tuple): \u53c2\u6570\u9ed8\u8ba4\u503c\n        annotations (dict): \u7c7b\u578b\u58f0\u660e\n        varargs (str): \u53c2\u6570\u4e2d*args\u7684\u540d\u79f0\n        varkw (str): \u53c2\u6570\u4e2d**dicts\u7684\u540d\u79f0\n        returnType (str): \u8fd4\u56de\u503c\u7684\u7c7b\u578b\n        asyncfunc (bool): \u662f\u5426\u4e3a\u5f02\u6b65\u51fd\u6570\u6216\u65b9\u6cd5\n    \"\"\"\n__slots__ = ('name',\n'methodType',\n'callable',\n'checkParams',\n'checkReturn',\n'cls',\n'doc',\n'params',\n'default_values',\n'annotations',\n'varargs',\n'varkw',\n'returnType',\n'asyncfunc',\n'useProcess')\ndef __init__(self,\nname:str,\nmethodType:str,\ncallable:callable,\ncheckParams:bool,\ncheckReturn:bool,\nuseProcess:bool=False) -&gt; None:\n\"\"\"\"\"\"\nself.name = name\nself.methodType = methodType\nself.callable = callable\nself.checkParams = checkParams\nself.checkReturn = checkReturn     \nself.useProcess = useProcess\nself.cls: str = '' if not inspect.ismethod(self.callable) else self.callable.__self__.__class__.__name__\nself.params:tuple = tuple(inspect.signature(self.callable).parameters.keys())        \nself.default_values:tuple= tuple([i.default for i in tuple(inspect.signature(self.callable).parameters.values()) if i.default is not inspect._empty])\nself.doc:str = inspect.getdoc(self.callable)\nannotations = dict([(k,v.annotation) for k,v in  inspect.signature(self.callable).parameters.items() if v.annotation is not inspect._empty])\nfor an in annotations.keys():\nannotations[an] = annotations[an]\nself.annotations:dict = annotations\nsp = inspect.getfullargspec(self.callable)\nself.varargs:str = sp.varargs\nself.varkw:str = sp.varkw\nself.returnType:str = sp.annotations.get('return')\nself.asyncfunc:bool = inspect.iscoroutinefunction(self.callable)\nasync def execute(self,args:tuple,dicts:dict,pool:ProcessPoolExecutor=None)-&gt;tuple[UtState,any,str]:\n\"\"\" \u6267\u884c\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\n        Args:\n            args: \u5217\u8868\u53c2\u6570\n            dicts: \u5b57\u5178\u53c2\u6570\n            pool: \u8fdb\u7a0b\u6c60\n        Returns:\n            \u8fd4\u56de\u503c\uff1a\u72b6\u6001\uff0c\u7ed3\u679c\uff0c\u9519\u8bef\u4fe1\u606f\n        \"\"\"\nresult = None\nstate = UtState.SUCCESS\nerror = ''\n# 1.\u68c0\u67e5\u53c2\u6570\nif self.checkParams:\ntry:\nargs,dicts = cheekType(self.params,self.annotations,args,dicts)\nexcept Exception as e:\nstate = UtState.FAILED\nerror = str(e)\nreturn state,result,error\ntry:\n# 2.\u6267\u884c\u6ce8\u518c\u51fd\u6570\nif self.useProcess:\n# \u8fdb\u7a0b\u4e2d\u6267\u884c\nif pool is None: \nlogger.error(f'The function \"{self.name}\" runs in a child process, but the server has no worker process')\nraise RuntimeError(f'The function \"{self.name}\" runs in a child process, but the server has no worker process')\nif self.asyncfunc:\nfn = partial(asyncfn_runner,self.callable,*args,**dicts)\nelse:\nfn = partial(self.callable,*args,**dicts)\nloop = asyncio.get_event_loop()\nres = await loop.run_in_executor(pool,fn)\nelse:\nif self.asyncfunc:\n# \u5f02\u6b65\u6267\u884c\nres = await self.callable(*args,**dicts)\nelse:\n# \u6b63\u5e38\u6267\u884c\nres = self.callable(*args,**dicts)\n# 3.\u68c0\u67e5\u8fd4\u56de\u503c\nif self.checkReturn and self.returnType:\ntry:\nres= allowType(res,self.returnType,self.name)\nresult = res\nexcept:\nstate = UtState.FAILED\nerror = f\"Return value error.'{type(res)}' is not of '{self.returnType}' type\"\nelse:                \nresult = res\nexcept Exception as e:\nstate = UtState.FAILED\nerror = str(e)\nreturn state,result,error\n</code></pre>"},{"location":"api/register/#utran.register.RMethod.execute","title":"<code>execute(args, dicts, pool=None)</code>  <code>async</code>","text":"<p>\u6267\u884c\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>tuple</code> <p>\u5217\u8868\u53c2\u6570</p> required <code>dicts</code> <code>dict</code> <p>\u5b57\u5178\u53c2\u6570</p> required <code>pool</code> <code>ProcessPoolExecutor</code> <p>\u8fdb\u7a0b\u6c60</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[UtState, any, str]</code> <p>\u8fd4\u56de\u503c\uff1a\u72b6\u6001\uff0c\u7ed3\u679c\uff0c\u9519\u8bef\u4fe1\u606f</p> Source code in <code>utran\\register.py</code> <pre><code>async def execute(self,args:tuple,dicts:dict,pool:ProcessPoolExecutor=None)-&gt;tuple[UtState,any,str]:\n\"\"\" \u6267\u884c\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\n    Args:\n        args: \u5217\u8868\u53c2\u6570\n        dicts: \u5b57\u5178\u53c2\u6570\n        pool: \u8fdb\u7a0b\u6c60\n    Returns:\n        \u8fd4\u56de\u503c\uff1a\u72b6\u6001\uff0c\u7ed3\u679c\uff0c\u9519\u8bef\u4fe1\u606f\n    \"\"\"\nresult = None\nstate = UtState.SUCCESS\nerror = ''\n# 1.\u68c0\u67e5\u53c2\u6570\nif self.checkParams:\ntry:\nargs,dicts = cheekType(self.params,self.annotations,args,dicts)\nexcept Exception as e:\nstate = UtState.FAILED\nerror = str(e)\nreturn state,result,error\ntry:\n# 2.\u6267\u884c\u6ce8\u518c\u51fd\u6570\nif self.useProcess:\n# \u8fdb\u7a0b\u4e2d\u6267\u884c\nif pool is None: \nlogger.error(f'The function \"{self.name}\" runs in a child process, but the server has no worker process')\nraise RuntimeError(f'The function \"{self.name}\" runs in a child process, but the server has no worker process')\nif self.asyncfunc:\nfn = partial(asyncfn_runner,self.callable,*args,**dicts)\nelse:\nfn = partial(self.callable,*args,**dicts)\nloop = asyncio.get_event_loop()\nres = await loop.run_in_executor(pool,fn)\nelse:\nif self.asyncfunc:\n# \u5f02\u6b65\u6267\u884c\nres = await self.callable(*args,**dicts)\nelse:\n# \u6b63\u5e38\u6267\u884c\nres = self.callable(*args,**dicts)\n# 3.\u68c0\u67e5\u8fd4\u56de\u503c\nif self.checkReturn and self.returnType:\ntry:\nres= allowType(res,self.returnType,self.name)\nresult = res\nexcept:\nstate = UtState.FAILED\nerror = f\"Return value error.'{type(res)}' is not of '{self.returnType}' type\"\nelse:                \nresult = res\nexcept Exception as e:\nstate = UtState.FAILED\nerror = str(e)\nreturn state,result,error\n</code></pre>"},{"location":"api/register/#utran.register.Register","title":"<code>Register</code>","text":""},{"location":"api/register/#utran.register.Register--_1","title":"\u6ce8\u518c\u7c7b\uff0c\u7528\u4e8e\u6ce8\u518c\u672c\u5730\u7684\u53ef\u8c03\u7528\u51fd\u6570\uff0c","text":"<p>\u652f\u6301(rpc\u3001get\u3001post)\u6ce8\u518c</p> <p>Parameters:</p> Name Type Description Default <code>checkParams</code> <code>bool</code> <p>\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362</p> <code>True</code> <code>checkReturn</code> <code>bool</code> <p>\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362</p> <code>True</code> <code>pool</code> <p>\u8fdb\u7a0b\u6c60\u5bf9\u8c61</p> required <p>\u6ce8:\u53ea\u6709\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u6307\u5b9a\u4e86\u7c7b\u578b\u65f6\u4ee5\u4e0a\u53c2\u6570\u624d\u4f1a\u8d77\u4f5c\u7528</p> Source code in <code>utran\\register.py</code> <pre><code>class Register:\n\"\"\"\n    # \u6ce8\u518c\u7c7b\uff0c\u7528\u4e8e\u6ce8\u518c\u672c\u5730\u7684\u53ef\u8c03\u7528\u51fd\u6570\uff0c\n    \u652f\u6301(rpc\u3001get\u3001post)\u6ce8\u518c\n    Args:\n        checkParams (bool): \u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\n        checkReturn (bool): \u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\n        pool: \u8fdb\u7a0b\u6c60\u5bf9\u8c61\n    \u6ce8:\u53ea\u6709\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u6307\u5b9a\u4e86\u7c7b\u578b\u65f6\u4ee5\u4e0a\u53c2\u6570\u624d\u4f1a\u8d77\u4f5c\u7528\n    \"\"\"\n__slots__ = ('__rpc_methods','__get_methods','__post_methods','__checkParams','__checkReturn','_temp_opts','_workers')\ndef __init__(self,checkParams:bool=True,checkReturn:bool=True,workers:int=0) -&gt; None:\nself.__rpc_methods = dict()     # {method_name:{callable:callable,}}\nself.__get_methods = dict()     # {path:{callable:callable,info:{}}}\nself.__post_methods = dict()    # {path:{callable:callable,info:{}}}\nself.__checkParams = checkParams\nself.__checkReturn = checkReturn\nself._temp_opts = dict()\nself._workers = workers\n@property\ndef methods_of_get(self):\nreturn self.__get_methods\n@property\ndef methods_of_post(self):\nreturn self.__post_methods\n@property\ndef methods_of_rpc(self):\nreturn self.__rpc_methods\ndef rpc(self,*fn,name=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),**opts):\n\"\"\"# RPC\u6ce8\u518c\n        \u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c\n        ## 1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n          `@register.rpc(name=?,ins_kwds=?,ins_args=?,**opts)`\n        Attributes:\n            name (str): \u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\uff0c\u975e`class`\u4e3a\u53ef\u9009\uff0c`class`\u4e3a\u5fc5\u586b\n            ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n            ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n            **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n        \u6ce8: \u6ce8\u518c\u975e`class`\u6216`class`\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 `@register.rpc`\n        ## 2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n        `register.rpc(fn,name=?,ins_kwds=?,ins_args=?,**opts)`\n        Attributes:\n            fn: \u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f`class`\u6216\u8005`class`\u5b9e\u4f8b\n            name (str): \u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\n            ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n            ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n            **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n        \"\"\"  \nfn = fn[0] if fn else None\nreturn self._register(fn,name,'rpc',ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\ndef get(self,*fn,path:str=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),**opts):\n\"\"\"# GET\u6ce8\u518c\n        \u5173\u4e8e\u540d\u79f0:\n            \u540d\u79f0\u5fc5\u987b\u662f\u5c0f\u5199,\u5982\u975e\u5c0f\u5199\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5c0f\u5199\u3002\u540d\u79f0\u524d\u4f1a\u52a0\u4e0a`/`\u659c\u6760\uff0c\u8f6c\u4e3a\u8def\u5f84\n        \u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c\n        ## 1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n          `@register.get(path=?,ins_kwds=?,ins_args=?,**opts)`\n        Attributes:\n            path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\uff0c\u975e`class`\u4e3a\u53ef\u9009\uff0c`class`\u4e3a\u5fc5\u586b\n            ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n            ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n            **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n        \u6ce8: \u6ce8\u518c\u975e`class`\u6216`class`\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 `@register.get`\n        ## 2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n        `register.get(fn,path=?,ins_kwds=?,ins_args=?,**opts)`\n        Attributes:\n            fn: \u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f`class`\u6216\u8005`class`\u5b9e\u4f8b\n            path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\n            ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n            ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n            **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n        \"\"\"\nfn = fn[0] if fn else None\nreturn self._register(fn,path,'get',ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\ndef post(self,*fn,path:str=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),**opts):      \n\"\"\"# POST\u6ce8\u518c\n        \u5173\u4e8e\u540d\u79f0:\n            \u540d\u79f0\u5fc5\u987b\u662f\u5c0f\u5199,\u5982\u975e\u5c0f\u5199\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5c0f\u5199\u3002\u540d\u79f0\u524d\u4f1a\u52a0\u4e0a`/`\u659c\u6760\uff0c\u8f6c\u4e3a\u8def\u5f84\n        \u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c\n        ## 1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n          `@register.post(path=?,ins_kwds=?,ins_args=?,**opts)`\n        Attributes:\n            path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\uff0c\u975e`class`\u4e3a\u53ef\u9009\uff0c`class`\u4e3a\u5fc5\u586b\n            ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n            ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n            **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n        \u6ce8: \u6ce8\u518c\u975e`class`\u6216`class`\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 `@register.post`\n        ## 2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n        `register.post(fn,path=?,ins_kwds=?,ins_args=?,**opts)`\n        Attributes:\n            fn: \u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f`class`\u6216\u8005`class`\u5b9e\u4f8b\n            path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\n            ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n            ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n            **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n        \"\"\" \nfn = fn[0] if fn else None\nreturn self._register(fn,path,'post',ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\ndef creatRMethod(self,**opts):\n\"\"\"# \u521b\u5efaRMethod\u5b9e\u4f8b\uff0c\u5e76\u4fdd\u5b58\u5230\u5bf9\u5e94\u5bb9\u5668\u4e2d\u3002\n        ## opts\u53c2\u6570\u5b57\u6bb5\n        Attributes:\n            name (str): \u6ce8\u518c\u7684\u540d\u79f0\u6216\u8def\u5f84\n            methodType (str): \u6ce8\u518c\u7c7b\u578b GET / POST / RPC\n            callable (callable): \u53ef\u8c03\u7528\u7684\u65b9\u6cd5/\u51fd\u6570\n            checkParams? (bool): \u53ef\u9009\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\n            checkReturn? (bool): \u53ef\u9009\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\n            useProcess? (bool):  \u53ef\u9009\uff0c\u662f\u5426\u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\n        \"\"\"\nname:str = opts.get('name')\nmethodType:str = opts.get('methodType')\nopts['useProcess'] = False if opts.get('useProcess') == None else opts.get('useProcess')\nopts['checkParams'] = self.__checkParams if opts.get('checkParams') == None else opts.get('checkParams')\nopts['checkReturn'] = self.__checkReturn if opts.get('checkReturn') == None else opts.get('checkReturn')\nif methodType=='rpc':\nname = opts.get('name')\nif not name[0].isalpha():\nraise ValueError(f\"Registration error,The name '{name}' must start with a letter\")\nself.__rpc_methods[name] = RMethod(**opts)\nreturn\nif methodType=='get':\nname = name.replace('.','/')\nif not name.startswith('/'):\nname='/'+name\nname_ = name.lower()\nif name != name_:\nlogger.warning(f'PathName changed,The path \"{name}\" changes to \"{name_}\"')\nself.__get_methods[name_] = RMethod(**opts)\nreturn\nif methodType=='post':\nname = name.replace('.','/')\nif not name.startswith('/'):\nname='/'+name\nname_ = name.lower()\nif name != name_:\nlogger.warning(f'PathName changed,The path \"{name}\" changes to \"{name_}\"')            \nself.__post_methods[name_] = RMethod(**opts)\nreturn\ndef _register(self,_f_=None,_n_=None,_t_:str=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),opts:dict=dict()):\n\"\"\"\u901a\u7528\u6ce8\u518c\uff0c\u652f\u6301\u6ce8\u518c\u51fd\u6570\uff0c\u7c7b\uff08\u81ea\u52a8\u5b9e\u4f8b\u5316\uff09\uff0c\u7c7b\u5b9e\u4f8b\uff0c\"\"\"\nif _f_ is None:\nreturn partial(self._register, _n_=_n_,_t_=_t_,ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\nif type(_f_)==str:\n_n_ = _f_.strip()\n# if _n_ and _n_[0].isalpha():\nif _n_:\nreturn partial(self._register,_n_=_n_,_t_=_t_,ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\nelse:\nraise ValueError(f\"Registration error,'{_f_}' cannot be used as a registered name!\")\nif inspect.isfunction(_f_) or inspect.ismethod(_f_):\nif not _n_:\n_n_ = _f_.__name__\nopts_:dict = dict(name=_n_,methodType=_t_,callable=_f_)\nopts_.update(opts)\nself.creatRMethod(**opts_)\nelif inspect.ismodule(_f_):\nraise ValueError(f\"Registration error,module '{_f_.__name__}' could not be registered!\")\nelse:\n# \u6ce8\u518cclass\nif not _n_:\nif inspect.isclass(_f_):\nraise ValueError(f\"Registration error,The '{_f_.__name__}' class is not named!\")\nelse:\nraise ValueError(f\"Registration error,The '{type(_f_).__name__}' instance is not named!\")\nif type(_n_)!=str:\nraise ValueError(f\"Registration error,The name '{_n_}' is not a string!\")\nif inspect.isclass(_f_):\n_instance = _f_(*ins_args,**ins_kwds)\nelse:\n_instance = _f_\nfor i in dir(_instance):\nif i.startswith(\"_\"):\ncontinue\n_f = getattr(_instance,i)\nif inspect.ismethod(_f) or inspect.isfunction(_f):\nmethod_name = f'{_n_}.{i}'\nopts_:dict = dict(name=method_name,methodType=_t_,callable=_f)\nopts_.update(opts)\nself.creatRMethod(**opts_)\nreturn _f_\n</code></pre>"},{"location":"api/register/#utran.register.Register.creatRMethod","title":"<code>creatRMethod(**opts)</code>","text":""},{"location":"api/register/#utran.register.Register.creatRMethod--rmethod","title":"\u521b\u5efaRMethod\u5b9e\u4f8b\uff0c\u5e76\u4fdd\u5b58\u5230\u5bf9\u5e94\u5bb9\u5668\u4e2d\u3002","text":""},{"location":"api/register/#utran.register.Register.creatRMethod--opts","title":"opts\u53c2\u6570\u5b57\u6bb5","text":"<p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>\u6ce8\u518c\u7684\u540d\u79f0\u6216\u8def\u5f84</p> <code>methodType</code> <code>str</code> <p>\u6ce8\u518c\u7c7b\u578b GET / POST / RPC</p> <code>callable</code> <code>callable</code> <p>\u53ef\u8c03\u7528\u7684\u65b9\u6cd5/\u51fd\u6570</p> <code>checkParams?</code> <code>bool</code> <p>\u53ef\u9009\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570</p> <code>checkReturn?</code> <code>bool</code> <p>\u53ef\u9009\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c</p> <code>useProcess?</code> <code>bool</code> <p>\u53ef\u9009\uff0c\u662f\u5426\u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c</p> Source code in <code>utran\\register.py</code> <pre><code>def creatRMethod(self,**opts):\n\"\"\"# \u521b\u5efaRMethod\u5b9e\u4f8b\uff0c\u5e76\u4fdd\u5b58\u5230\u5bf9\u5e94\u5bb9\u5668\u4e2d\u3002\n    ## opts\u53c2\u6570\u5b57\u6bb5\n    Attributes:\n        name (str): \u6ce8\u518c\u7684\u540d\u79f0\u6216\u8def\u5f84\n        methodType (str): \u6ce8\u518c\u7c7b\u578b GET / POST / RPC\n        callable (callable): \u53ef\u8c03\u7528\u7684\u65b9\u6cd5/\u51fd\u6570\n        checkParams? (bool): \u53ef\u9009\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\n        checkReturn? (bool): \u53ef\u9009\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\n        useProcess? (bool):  \u53ef\u9009\uff0c\u662f\u5426\u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\n    \"\"\"\nname:str = opts.get('name')\nmethodType:str = opts.get('methodType')\nopts['useProcess'] = False if opts.get('useProcess') == None else opts.get('useProcess')\nopts['checkParams'] = self.__checkParams if opts.get('checkParams') == None else opts.get('checkParams')\nopts['checkReturn'] = self.__checkReturn if opts.get('checkReturn') == None else opts.get('checkReturn')\nif methodType=='rpc':\nname = opts.get('name')\nif not name[0].isalpha():\nraise ValueError(f\"Registration error,The name '{name}' must start with a letter\")\nself.__rpc_methods[name] = RMethod(**opts)\nreturn\nif methodType=='get':\nname = name.replace('.','/')\nif not name.startswith('/'):\nname='/'+name\nname_ = name.lower()\nif name != name_:\nlogger.warning(f'PathName changed,The path \"{name}\" changes to \"{name_}\"')\nself.__get_methods[name_] = RMethod(**opts)\nreturn\nif methodType=='post':\nname = name.replace('.','/')\nif not name.startswith('/'):\nname='/'+name\nname_ = name.lower()\nif name != name_:\nlogger.warning(f'PathName changed,The path \"{name}\" changes to \"{name_}\"')            \nself.__post_methods[name_] = RMethod(**opts)\nreturn\n</code></pre>"},{"location":"api/register/#utran.register.Register.get","title":"<code>get(*fn, path=None, ins_args=tuple(), ins_kwds=dict(), **opts)</code>","text":""},{"location":"api/register/#utran.register.Register.get--get","title":"GET\u6ce8\u518c","text":"\u5173\u4e8e\u540d\u79f0 <p>\u540d\u79f0\u5fc5\u987b\u662f\u5c0f\u5199,\u5982\u975e\u5c0f\u5199\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5c0f\u5199\u3002\u540d\u79f0\u524d\u4f1a\u52a0\u4e0a<code>/</code>\u659c\u6760\uff0c\u8f6c\u4e3a\u8def\u5f84</p> <p>\u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c</p>"},{"location":"api/register/#utran.register.Register.get--1","title":"1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca","text":"<p><code>@register.get(path=?,ins_kwds=?,ins_args=?,**opts)</code></p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>\u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\uff0c\u975e<code>class</code>\u4e3a\u53ef\u9009\uff0c<code>class</code>\u4e3a\u5fc5\u586b</p> <code>ins_args</code> <code>tuple</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570</p> <code>ins_kwds</code> <code>dict</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570</p> <code>**opts</code> <code>dict</code> <p>\u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49</p> <p>\u6ce8: \u6ce8\u518c\u975e<code>class</code>\u6216<code>class</code>\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 <code>@register.get</code></p>"},{"location":"api/register/#utran.register.Register.get--2","title":"2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca","text":"<p><code>register.get(fn,path=?,ins_kwds=?,ins_args=?,**opts)</code></p> <p>Attributes:</p> Name Type Description <code>fn</code> <p>\u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f<code>class</code>\u6216\u8005<code>class</code>\u5b9e\u4f8b</p> <code>path</code> <code>str</code> <p>\u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0</p> <code>ins_args</code> <code>tuple</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570</p> <code>ins_kwds</code> <code>dict</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570</p> <code>**opts</code> <code>dict</code> <p>\u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49</p> Source code in <code>utran\\register.py</code> <pre><code>def get(self,*fn,path:str=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),**opts):\n\"\"\"# GET\u6ce8\u518c\n    \u5173\u4e8e\u540d\u79f0:\n        \u540d\u79f0\u5fc5\u987b\u662f\u5c0f\u5199,\u5982\u975e\u5c0f\u5199\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5c0f\u5199\u3002\u540d\u79f0\u524d\u4f1a\u52a0\u4e0a`/`\u659c\u6760\uff0c\u8f6c\u4e3a\u8def\u5f84\n    \u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c\n    ## 1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n      `@register.get(path=?,ins_kwds=?,ins_args=?,**opts)`\n    Attributes:\n        path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\uff0c\u975e`class`\u4e3a\u53ef\u9009\uff0c`class`\u4e3a\u5fc5\u586b\n        ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n        ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n        **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n    \u6ce8: \u6ce8\u518c\u975e`class`\u6216`class`\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 `@register.get`\n    ## 2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n    `register.get(fn,path=?,ins_kwds=?,ins_args=?,**opts)`\n    Attributes:\n        fn: \u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f`class`\u6216\u8005`class`\u5b9e\u4f8b\n        path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\n        ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n        ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n        **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n    \"\"\"\nfn = fn[0] if fn else None\nreturn self._register(fn,path,'get',ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\n</code></pre>"},{"location":"api/register/#utran.register.Register.post","title":"<code>post(*fn, path=None, ins_args=tuple(), ins_kwds=dict(), **opts)</code>","text":""},{"location":"api/register/#utran.register.Register.post--post","title":"POST\u6ce8\u518c","text":"\u5173\u4e8e\u540d\u79f0 <p>\u540d\u79f0\u5fc5\u987b\u662f\u5c0f\u5199,\u5982\u975e\u5c0f\u5199\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5c0f\u5199\u3002\u540d\u79f0\u524d\u4f1a\u52a0\u4e0a<code>/</code>\u659c\u6760\uff0c\u8f6c\u4e3a\u8def\u5f84</p> <p>\u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c</p>"},{"location":"api/register/#utran.register.Register.post--1","title":"1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca","text":"<p><code>@register.post(path=?,ins_kwds=?,ins_args=?,**opts)</code></p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>\u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\uff0c\u975e<code>class</code>\u4e3a\u53ef\u9009\uff0c<code>class</code>\u4e3a\u5fc5\u586b</p> <code>ins_args</code> <code>tuple</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570</p> <code>ins_kwds</code> <code>dict</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570</p> <code>**opts</code> <code>dict</code> <p>\u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49</p> <p>\u6ce8: \u6ce8\u518c\u975e<code>class</code>\u6216<code>class</code>\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 <code>@register.post</code></p>"},{"location":"api/register/#utran.register.Register.post--2","title":"2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca","text":"<p><code>register.post(fn,path=?,ins_kwds=?,ins_args=?,**opts)</code></p> <p>Attributes:</p> Name Type Description <code>fn</code> <p>\u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f<code>class</code>\u6216\u8005<code>class</code>\u5b9e\u4f8b</p> <code>path</code> <code>str</code> <p>\u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0</p> <code>ins_args</code> <code>tuple</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570</p> <code>ins_kwds</code> <code>dict</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570</p> <code>**opts</code> <code>dict</code> <p>\u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49</p> Source code in <code>utran\\register.py</code> <pre><code>def post(self,*fn,path:str=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),**opts):      \n\"\"\"# POST\u6ce8\u518c\n    \u5173\u4e8e\u540d\u79f0:\n        \u540d\u79f0\u5fc5\u987b\u662f\u5c0f\u5199,\u5982\u975e\u5c0f\u5199\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5c0f\u5199\u3002\u540d\u79f0\u524d\u4f1a\u52a0\u4e0a`/`\u659c\u6760\uff0c\u8f6c\u4e3a\u8def\u5f84\n    \u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c\n    ## 1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n      `@register.post(path=?,ins_kwds=?,ins_args=?,**opts)`\n    Attributes:\n        path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\uff0c\u975e`class`\u4e3a\u53ef\u9009\uff0c`class`\u4e3a\u5fc5\u586b\n        ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n        ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n        **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n    \u6ce8: \u6ce8\u518c\u975e`class`\u6216`class`\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 `@register.post`\n    ## 2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n    `register.post(fn,path=?,ins_kwds=?,ins_args=?,**opts)`\n    Attributes:\n        fn: \u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f`class`\u6216\u8005`class`\u5b9e\u4f8b\n        path (str): \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0\n        ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n        ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n        **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n    \"\"\" \nfn = fn[0] if fn else None\nreturn self._register(fn,path,'post',ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\n</code></pre>"},{"location":"api/register/#utran.register.Register.rpc","title":"<code>rpc(*fn, name=None, ins_args=tuple(), ins_kwds=dict(), **opts)</code>","text":""},{"location":"api/register/#utran.register.Register.rpc--rpc","title":"RPC\u6ce8\u518c","text":"<p>\u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c</p>"},{"location":"api/register/#utran.register.Register.rpc--1","title":"1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca","text":"<p><code>@register.rpc(name=?,ins_kwds=?,ins_args=?,**opts)</code></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>\u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\uff0c\u975e<code>class</code>\u4e3a\u53ef\u9009\uff0c<code>class</code>\u4e3a\u5fc5\u586b</p> <code>ins_args</code> <code>tuple</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570</p> <code>ins_kwds</code> <code>dict</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570</p> <code>**opts</code> <code>dict</code> <p>\u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49</p> <p>\u6ce8: \u6ce8\u518c\u975e<code>class</code>\u6216<code>class</code>\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 <code>@register.rpc</code></p>"},{"location":"api/register/#utran.register.Register.rpc--2","title":"2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca","text":"<p><code>register.rpc(fn,name=?,ins_kwds=?,ins_args=?,**opts)</code></p> <p>Attributes:</p> Name Type Description <code>fn</code> <p>\u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f<code>class</code>\u6216\u8005<code>class</code>\u5b9e\u4f8b</p> <code>name</code> <code>str</code> <p>\u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0</p> <code>ins_args</code> <code>tuple</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570</p> <code>ins_kwds</code> <code>dict</code> <p>\u53ea\u6709\u6ce8\u518c<code>class</code>\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570</p> <code>**opts</code> <code>dict</code> <p>\u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49</p> Source code in <code>utran\\register.py</code> <pre><code>def rpc(self,*fn,name=None,ins_args:tuple=tuple(),ins_kwds:dict=dict(),**opts):\n\"\"\"# RPC\u6ce8\u518c\n    \u652f\u6301\uff1a\u7c7b/\u7c7b\u65b9\u6cd5/\u7c7b\u5b9e\u4f8b/\u51fd\u6570\u7684\u6ce8\u518c\n    ## 1.\u88c5\u9970\u5668\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n      `@register.rpc(name=?,ins_kwds=?,ins_args=?,**opts)`\n    Attributes:\n        name (str): \u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\uff0c\u975e`class`\u4e3a\u53ef\u9009\uff0c`class`\u4e3a\u5fc5\u586b\n        ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n        ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n        **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n    \u6ce8: \u6ce8\u518c\u975e`class`\u6216`class`\u5b9e\u4f8b\u65f6\uff0c\u53ef\u652f\u6301\u65e0\u53c2\u8c03\u7528 `@register.rpc`\n    ## 2.\u65b9\u6cd5\u8c03\u7528\u65f6\u53c2\u6570\u89e3\u91ca \n    `register.rpc(fn,name=?,ins_kwds=?,ins_args=?,**opts)`\n    Attributes:\n        fn: \u8981\u6ce8\u518c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u662f`class`\u6216\u8005`class`\u5b9e\u4f8b\n        name (str): \u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\n        ins_args (tuple): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\n        ins_kwds (dict): \u53ea\u6709\u6ce8\u518c`class`\u65f6\u624d\u6709\u8fd9\u4e2a\u9009\u9879\uff0c\u4e3a\u7c7b\u5b9e\u4f8b\u5316\u7684\u5173\u952e\u5b57\u53c2\u6570\n        **opts: \u9009\u9879\u3002\u4f8b\u5982: useProcess = True \u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u8fd8\u6709 checkParams\u3001checkReturn\u7b49\n    \"\"\"  \nfn = fn[0] if fn else None\nreturn self._register(fn,name,'rpc',ins_args=ins_args,ins_kwds=ins_kwds,opts=opts)\n</code></pre>"},{"location":"api/register/#utran.register.allowType","title":"<code>allowType(v, t, n)</code>","text":""},{"location":"api/register/#utran.register.allowType--_1","title":"\u7c7b\u578b\u8f6c\u6362","text":""},{"location":"api/register/#utran.register.allowType--1","title":"1.\u5f53\u81ea\u8eab\u7684\u6570\u636e\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u6570\u636e\u4e00\u81f4\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5\u6570\u636e\uff1b","text":""},{"location":"api/register/#utran.register.allowType--2typeerror","title":"2.\u5f53\u81ea\u8eab\u7684\u6570\u636e\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u9996\u5148\u5c1d\u8bd5\u662f\u5426\u53ef\u4ee5\u4e4b\u95f4\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\uff0c\u5426\u5219\uff0c\u68c0\u67e5\u662f\u5426\u4e3a\u5141\u8bb8\u7c7b\u578b\uff0c\u5982\u679c\u662f\u5219\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5426\u5219\u62a5\u9519TypeError\u3002","text":"<p>Parameters:</p> Name Type Description Default <code>v</code> <p>\u6570\u636e</p> required <code>t</code> <code>str</code> <p>\u6570\u636e\u7c7b\u578b</p> required <code>n</code> <code>str</code> <p>\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u540d\u79f0</p> required Source code in <code>utran\\register.py</code> <pre><code>def allowType(v,t,n):\n\"\"\" \n    # \u7c7b\u578b\u8f6c\u6362\n    ### 1.\u5f53\u81ea\u8eab\u7684\u6570\u636e\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u6570\u636e\u4e00\u81f4\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5\u6570\u636e\uff1b\n    ### 2.\u5f53\u81ea\u8eab\u7684\u6570\u636e\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u9996\u5148\u5c1d\u8bd5\u662f\u5426\u53ef\u4ee5\u4e4b\u95f4\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\uff0c\u5426\u5219\uff0c\u68c0\u67e5\u662f\u5426\u4e3a\u5141\u8bb8\u7c7b\u578b\uff0c\u5982\u679c\u662f\u5219\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5426\u5219\u62a5\u9519TypeError\u3002\n    Args:\n        v: \u6570\u636e\n        t (str): \u6570\u636e\u7c7b\u578b\n        n (str): \u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u540d\u79f0\n    \"\"\"\nif type(v)==t:\nreturn v\nelse:\ntry:\nv =  t(v)\nreturn v\nexcept TypeError:\npass\nclass_ = t\nif class_ and issubclass(class_,BaseDataModel):\ntry:\nreturn class_(**v)\nexcept Exception as e:\nraise TypeError('Error converting data:',e)\nelse:\nraise TypeError(f\"Type error, value '{n}' must be {t} type.\")\n</code></pre>"},{"location":"api/register/#utran.register.cheekType","title":"<code>cheekType(params, annotations, args, dicts={})</code>","text":""},{"location":"api/register/#utran.register.cheekType--_1","title":"\u68c0\u67e5\u7c7b\u578b","text":"<p>\u5f53\u6307\u5b9a\u7684\u7c7b\u578b\u5c5e\u4e8eBaseDataModel\u7684\u5b50\u7c7b\u65f6\uff0c\u5c06\u5c1d\u8bd5\u8fdb\u884c\u81ea\u52a8\u8f6c\u6362</p> Source code in <code>utran\\register.py</code> <pre><code>def cheekType(params:tuple,annotations:dict,args:tuple,dicts:dict={})-&gt;tuple:\n\"\"\"\n    # \u68c0\u67e5\u7c7b\u578b\n    \u5f53\u6307\u5b9a\u7684\u7c7b\u578b\u5c5e\u4e8eBaseDataModel\u7684\u5b50\u7c7b\u65f6\uff0c\u5c06\u5c1d\u8bd5\u8fdb\u884c\u81ea\u52a8\u8f6c\u6362\n    \"\"\"\nargs = list(args)   \nfor i in range(len(params)):\nn = params[i]\nt = annotations.get(n)\nif not t:\ncontinue\ntry:\nv = args[i]\nargs[i] = allowType(v,t,n)\nexcept IndexError:\ntry:\nv = dicts[n]\ndicts[n] = allowType(v,t,n)\nexcept KeyError:\ncontinue\nreturn tuple(args),dicts\n</code></pre>"},{"location":"api/runner/","title":"runner","text":""},{"location":"api/runner/#utran.runner.run","title":"<code>run(app, *, host='127.0.0.1', port=8080, url=None, entry=None, loop=None, username=None, password=None)</code>","text":""},{"location":"api/runner/#utran.runner.run--_1","title":"\u901a\u7528\u7684\u8fd0\u884c\u5668","text":"<p>Parameters:</p> Name Type Description Default <code>app</code> <code>Union[Server, WebServer, BaseClient, Client]</code> <p>\u9700\u8981\u8fd0\u884c\u7684\u670d\u52a1</p> required <code>host</code> <code>str</code> <p>\u4e3b\u673a</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>RPC\u7aef\u53e3</p> <code>8080</code> <code>web_port</code> <p>WEB\u7aef\u53e3</p> required <code>url</code> <code>str</code> <p>\u8fdc\u7a0b\u670d\u52a1\u5730\u5740    </p> <code>None</code> <code>loop</code> <code>asyncio.AbstractEventLoop</code> <p>\u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af</p> <code>None</code> Source code in <code>utran\\runner.py</code> <pre><code>def run(app:Union[Server,WebServer,BaseClient,Client],\n*,\nhost:str='127.0.0.1',\nport:int=8080,\nurl:str=None,\nentry:callable=None,\nloop:asyncio.AbstractEventLoop=None,\nusername: str = None,\npassword: str = None):\n\"\"\"# \u901a\u7528\u7684\u8fd0\u884c\u5668\n    Args:\n        app: \u9700\u8981\u8fd0\u884c\u7684\u670d\u52a1\n        host: \u4e3b\u673a\n        port: RPC\u7aef\u53e3\n        web_port: WEB\u7aef\u53e3\n        url: \u8fdc\u7a0b\u670d\u52a1\u5730\u5740    \n        loop: \u6307\u5b9a\u4e8b\u4ef6\u5faa\u73af\n    \"\"\"\nif isinstance(app,Server):        \ncoro= app.start(host=host,\nport=port,\nusername=username,\npassword=password)\nif loop:\nloop.run_until_complete(coro)\nelse:\nasyncio.run(coro)\nif isinstance(app,WebServer):\ncoro= app.start(host=host,\nport=port,\nusername=username,\npassword=password)\nif loop:\nloop.run_until_complete(coro)\nelse:\nasyncio.run(coro)\nif isinstance(app,Client):\nif callable(entry):\napp(entry,url=url,username=username,password=password,loop=loop)\nelse:\nraise RuntimeError('Run Error,\u672a\u6307\u5b9a\u6709\u6548\u7684entry')\n</code></pre>"},{"location":"api/server/","title":"\u670d\u52a1\u7aef\u6a21\u5757","text":""},{"location":"api/server/#_2","title":"\u3010\u670d\u52a1\u7aef\u3011","text":"<p>RpcServer\u4f7f\u7528\u793a\u4f8b<pre><code>import utran\nfrom utran.server import Server,HttpResponse\nserver = Server()\n@server.register.get('/')\nasync def home(name='wolrd'):\nreturn HttpResponse(text=f\"&lt;h3 style ='color: orange;'&gt; Hello {name}.&lt;/h3&gt;\",content_type='text/html')\n@server.register.rpc(useProcess=True)   # \u6dfb\u52a0\u6ce8\u518c\u9009\u9879\uff0c useProcess=True\u4e3a\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\n@server.register.post\n@server.register.get\nasync def add(a:int,b:int):\nreturn a+b\n@server.register.rpc\nasync def hardwork(a:int,b:int):\nawait asyncio.sleep(1)\nreturn a+b\nid = 0\n@server.register.get\nasync def pub(topic:str,msg:str):\nglobal id\nid+=1\nawait server.publish(id,msg,topic)\nutran.run(server,host='127.0.0.1',port=8081,port=8080)\n</code></pre> </p> <p>\u5305\u542b\u4e86web\u670d\u52a1\u548cRpc\u670d\u52a1\u7aef\uff0c\u652f\u6301 RPC\u3001GET\u3001POST\u3001SUB/PUB</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>\u4e3b\u673a\u5730\u5740</p> required <code>port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <code>severName</code> <code>str</code> <p>\u670d\u52a1\u540d\u79f0</p> <code>'UtranServer'</code> <code>checkParams</code> <code>bool</code> <p>\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362</p> <code>True</code> <code>checkReturn</code> <code>bool</code> <p>\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362</p> <code>True</code> <code>dataMaxsize</code> <code>int</code> <p>\u652f\u6301\u6700\u5927\u6570\u636e\u5b57\u8282\u6570</p> <code>1024 ** 10</code> <code>limitHeartbeatInterval</code> <code>int</code> <p>\u5fc3\u8df3\u68c0\u6d4b\u7684\u6781\u9650\u503c\uff0c\u4e3a\u4e86\u9632\u6b62\u5fc3\u8df3\u653b\u51fb\uff0c\u9ed8\u8ba4\u4e3a1s,\u4e24\u6b21\u5fc3\u8df3\u7684\u95f4\u9694\u5c0f\u4e8e\u8be5\u503c\u5219\u4f1a\u65ad\u5f00\u8fde\u63a5\u3002</p> <code>1</code> Source code in <code>utran\\server\\server.py</code> <pre><code>class Server:\n\"\"\"\u5305\u542b\u4e86web\u670d\u52a1\u548cRpc\u670d\u52a1\u7aef\uff0c\u652f\u6301 RPC\u3001GET\u3001POST\u3001SUB/PUB\n    Args:\n        host (str): \u4e3b\u673a\u5730\u5740\n        port (int): \u7aef\u53e3\u53f7\n        severName (str): \u670d\u52a1\u540d\u79f0\n        checkParams (bool): \u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\n        checkReturn (bool): \u8c03\u7528\u6ce8\u518c\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u662f\u5426\u68c0\u67e5\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5f00\u542f\u540e\u5f53\u7c7b\u578b\u4e3a\u6570\u636e\u6a21\u578b\u65f6\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\n        dataMaxsize (int):  \u652f\u6301\u6700\u5927\u6570\u636e\u5b57\u8282\u6570\n        limitHeartbeatInterval (int): \u5fc3\u8df3\u68c0\u6d4b\u7684\u6781\u9650\u503c\uff0c\u4e3a\u4e86\u9632\u6b62\u5fc3\u8df3\u653b\u51fb\uff0c\u9ed8\u8ba4\u4e3a1s,\u4e24\u6b21\u5fc3\u8df3\u7684\u95f4\u9694\u5c0f\u4e8e\u8be5\u503c\u5219\u4f1a\u65ad\u5f00\u8fde\u63a5\u3002\n    \"\"\"\n__slots__=(\n'_host',\n'_port',\n'_checkParams',\n'_checkReturn',\n'_register',\n'_sub_container',\n'_severName',\n'_dataMaxsize',\n'_dataEncrypt',\n'_limitHeartbeatInterval',\n'_webServer',\n'_rpcServer',\n'__isruning',\n'_workers',\n'_pool')\ndef __init__(\nself,\n*,\ncheckParams:bool = True,\ncheckReturn:bool = True,\nregister: Register = None,\nsub_container: SubscriptionContainer = None,\nseverName: str = 'UtranServer',\ndataMaxsize: int = 1024**10,\nlimitHeartbeatInterval: int = 1,\ndataEncrypt: bool = False,\nworkers:int = 1) -&gt; None:\nself._checkParams = checkParams\nself._checkReturn = checkReturn\nself._workers = workers                             # \u8fdb\u7a0b\u6c60\u6570\u91cf        \nself._register = register or Register(checkParams=checkParams,checkReturn=checkReturn,workers=workers)\nself._sub_container = sub_container or SubscriptionContainer()\nself._severName = severName\nself._dataMaxsize = dataMaxsize        \nself._limitHeartbeatInterval = limitHeartbeatInterval\nself._dataEncrypt = dataEncrypt\nself.__isruning=False\nself._pool = None\nasync def start(self,\nhost: str = '127.0.0.1',\nport:int=8080,\nusername: str = None,\npassword: str = None)-&gt;None:\n\"\"\"\n        # \u8fd0\u884c\u670d\u52a1\n        \u793a\u4f8b:\n            ### server = Server()\n            ### asyncio.run(server.start())\n        \"\"\"\nif self.__isruning: return\nelse: self.__isruning = True\n# \u521b\u5efa\u8fdb\u7a0b\u6c60\nif self._workers&gt;0 and self._pool is None:\nself._pool = ProcessPoolExecutor(self._workers)\nself._host = host\nself._port= port\nself._webServer = WebServer(\nregister= self._register, \nseverName= self._severName,\nsub_container= self._sub_container,\ncheckParams=self._checkParams,\ncheckReturn=self._checkReturn,\ndataMaxsize= self._dataMaxsize, \nlimitHeartbeatInterval= self._limitHeartbeatInterval, \ndataEncrypt= self._dataEncrypt,\nworkers=self._workers,\npool=self._pool)\nawait self._webServer.start(host,port,username=username,password=password)\n@property\ndef register(self)-&gt;Register:\n\"\"\"# \u6ce8\u518c\n        Returns:\n            \u8fd4\u56de\u4e00\u4e2aRegister\u7c7b\u7684\u5b9e\u4f8b\n        \"\"\"\nreturn self._register\nasync def publish(self,id:int,msg:any,*topics:str)-&gt;None:\n\"\"\"\n        # \u7ed9\u6307\u5b9atopic\u63a8\u9001\u6d88\u606f\n        Args:\n            id (int): id\u6807\u8bc6\n            topic (str): \u6307\u5b9a\u8bdd\u9898\n            msg (dict): \u6d88\u606f\n        \"\"\" \nawait process_publish_request(UtRequest(id,requestType=UtType.PUBLISH,topics=topics,msg=msg),self._sub_container)\ndef exit(self):\n\"\"\"\u9000\u51fa\u7a0b\u5e8f\"\"\"\nself._webServer.exit()\n</code></pre>"},{"location":"api/server/#utran.server.server.Server.register","title":"<code>register: Register</code>  <code>property</code>","text":""},{"location":"api/server/#utran.server.server.Server.register--_1","title":"\u6ce8\u518c","text":"<p>Returns:</p> Type Description <code>Register</code> <p>\u8fd4\u56de\u4e00\u4e2aRegister\u7c7b\u7684\u5b9e\u4f8b</p>"},{"location":"api/server/#utran.server.server.Server.exit","title":"<code>exit()</code>","text":"<p>\u9000\u51fa\u7a0b\u5e8f</p> Source code in <code>utran\\server\\server.py</code> <pre><code>def exit(self):\n\"\"\"\u9000\u51fa\u7a0b\u5e8f\"\"\"\nself._webServer.exit()\n</code></pre>"},{"location":"api/server/#utran.server.server.Server.publish","title":"<code>publish(id, msg, *topics)</code>  <code>async</code>","text":""},{"location":"api/server/#utran.server.server.Server.publish--topic","title":"\u7ed9\u6307\u5b9atopic\u63a8\u9001\u6d88\u606f","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>id\u6807\u8bc6</p> required <code>topic</code> <code>str</code> <p>\u6307\u5b9a\u8bdd\u9898</p> required <code>msg</code> <code>dict</code> <p>\u6d88\u606f</p> required Source code in <code>utran\\server\\server.py</code> <pre><code>async def publish(self,id:int,msg:any,*topics:str)-&gt;None:\n\"\"\"\n    # \u7ed9\u6307\u5b9atopic\u63a8\u9001\u6d88\u606f\n    Args:\n        id (int): id\u6807\u8bc6\n        topic (str): \u6307\u5b9a\u8bdd\u9898\n        msg (dict): \u6d88\u606f\n    \"\"\" \nawait process_publish_request(UtRequest(id,requestType=UtType.PUBLISH,topics=topics,msg=msg),self._sub_container)\n</code></pre>"},{"location":"api/server/#utran.server.server.Server.start","title":"<code>start(host='127.0.0.1', port=8080, username=None, password=None)</code>  <code>async</code>","text":""},{"location":"api/server/#utran.server.server.Server.start--_1","title":"\u8fd0\u884c\u670d\u52a1","text":"\u793a\u4f8b Source code in <code>utran\\server\\server.py</code> <pre><code>async def start(self,\nhost: str = '127.0.0.1',\nport:int=8080,\nusername: str = None,\npassword: str = None)-&gt;None:\n\"\"\"\n    # \u8fd0\u884c\u670d\u52a1\n    \u793a\u4f8b:\n        ### server = Server()\n        ### asyncio.run(server.start())\n    \"\"\"\nif self.__isruning: return\nelse: self.__isruning = True\n# \u521b\u5efa\u8fdb\u7a0b\u6c60\nif self._workers&gt;0 and self._pool is None:\nself._pool = ProcessPoolExecutor(self._workers)\nself._host = host\nself._port= port\nself._webServer = WebServer(\nregister= self._register, \nseverName= self._severName,\nsub_container= self._sub_container,\ncheckParams=self._checkParams,\ncheckReturn=self._checkReturn,\ndataMaxsize= self._dataMaxsize, \nlimitHeartbeatInterval= self._limitHeartbeatInterval, \ndataEncrypt= self._dataEncrypt,\nworkers=self._workers,\npool=self._pool)\nawait self._webServer.start(host,port,username=username,password=password)\n</code></pre>"},{"location":"api/server/#utran.server.server.Server.start--server-server","title":"server = Server()","text":""},{"location":"api/server/#utran.server.server.Server.start--asynciorunserverstart","title":"asyncio.run(server.start())","text":""},{"location":"api/server/#web","title":"\u3010Web\u670d\u52a1\u7aef\u3011","text":"<p>WebServer\u4f7f\u7528\u793a\u4f8b<pre><code>import utran\nfrom utran.server import WebServer,HttpResponse\nserver = WebServer()\n@server.register.get('/')\nasync def home(name='utran'):\nreturn HttpResponse(text=f\"&lt;h1'&gt; Hello {name}.&lt;/h1&gt;\",content_type='text/html')\n@server.register.post\nasync def add(a:int,b:int):\nreturn a+b\nutran.run(server,host='127.0.0.1',port=8080)\n</code></pre> </p> <p>         Bases: <code>BaseServer</code></p> Source code in <code>utran\\server\\webserver.py</code> <pre><code>class WebServer(BaseServer):\n__slots__=('__auth',)\ndef __init__(self, \n*, \nregister: Register = None, \nsub_container: SubscriptionContainer = None, \nseverName: str = 'WebServer', \ncheckParams: bool = True, \ncheckReturn: bool = True, \ndataMaxsize: int = 1024*1024, \nlimitHeartbeatInterval: int = 1, \ndataEncrypt: bool = False, \nworkers: int = 0, \npool:ProcessPoolExecutor=None) -&gt; None:\nsuper().__init__(\nregister=register, \nsub_container=sub_container, \nseverName=severName, \ncheckParams=checkParams, \ncheckReturn=checkReturn, \ndataMaxsize=dataMaxsize, \nlimitHeartbeatInterval=limitHeartbeatInterval, \ndataEncrypt=dataEncrypt, \nworkers=workers, \npool=pool)\nself.__auth:aiohttp.BasicAuth = aiohttp.BasicAuth('utranhost','utranhost')\nasync def start(self,host: str,port: int,username:str=None,password:str=None) -&gt; None:\nself._host = host\nself._port = port\nif username!=None or password!=None:\nassert username!=None,'username is None.'\nassert password!=None,'password is None.'\nself.__auth:aiohttp.BasicAuth = aiohttp.BasicAuth(username,password)\n# \u521b\u5efa\u8fdb\u7a0b\u6c60\nif self._workers&gt;0 and self._pool is None:\nself._pool = ProcessPoolExecutor(self._workers)\nserver = web.Server(self.handle_request)\nrunner = web.ServerRunner(server)\nawait runner.setup()\nsite = web.TCPSite(runner, self._host, self._port)\nawait site.start()\nlogger.success(f\"\\n{'='*6} {self._severName} on http://{site._host}:{site._port}/ {'='*6}\")\nawait self._exitEvent.wait()\nasync def handle_request(self,request:web_request.BaseRequest):\n\"\"\"\u5904\u7406web\u8bf7\u6c42,\u5206\u53d1http\u8bf7\u6c42\u548cwebsocket\u8bf7\u6c42\"\"\"\n# \u9a8c\u8bc1\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\nauth_header = request.headers.get('Authorization')\nif auth_header:\nauth = self.__auth.decode(auth_header)\nelse:\nauth = None\nwname = request.headers.get('Upgrade')\nif wname and wname.lower() == 'websocket':\nws = WebSocketResponse(max_msg_size=self._dataMaxsize)            \nawait ws.prepare(request)\nif auth != self.__auth:\n# \u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25\nawait ws.send_str('\u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25!')\nreturn\nelse:\n#  \u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\nawait ws.send_str('ok')\nawait self.websocket_handler(ws)\nelse:\nreturn await self.http_handler(request)\nasync def http_handler(self,request:web_request.BaseRequest):\n\"\"\"\u5904\u7406web\u8bf7\u6c42\"\"\" \nexecute_res:dict = dict()\nif request.method not in [ 'GET', 'POST']:\nexecute_res['state'] = 'failed'\nexecute_res['error'] = f'Method that is not allowed by the server'\nstatus = 500\nreturn HttpResponse(status=status,text=ujson.dumps(execute_res),content_type='application/json')\nif request.method == 'GET':\nrm:RMethod = self._register.methods_of_get.get(request.path)\nelse:\nrm:RMethod = self._register.methods_of_post.get(request.path)\n_ = request.query_string.split('&amp;')\nstatus = 200\nif rm:\ndicts = dict()\nfor p in _:\nif '=' in p:\nk,v = re.split(r\"=\", p, maxsplit=1)\ndicts[k.strip()]=v.strip()\nstate,result,error = await rm.execute(args=tuple(),dicts=dicts,pool=self._pool)\nexecute_res['state'] = state.value\nexecute_res['error'] = error\nexecute_res['result'] = result\nif state == UtState.FAILED:\nstatus=422\nelse:\nexecute_res['state'] = 'failed'\nexecute_res['error'] = f'Not found!'\nstatus = 400\nreturn HttpResponse(status=status,text=ujson.dumps(execute_res),content_type='application/json')\nif isinstance(result,HttpResponse):\nreturn result\nelse:\nreturn HttpResponse(status=status,text=ujson.dumps(execute_res),content_type='application/json')\nasync def websocket_handler(self,ws:WebSocketResponse):\n\"\"\"\u5904\u7406websocket\u8bf7\u6c42\"\"\"\nconnection = ClientConnection(ws,self._dataEncrypt)\nt = float('-inf')        \nasync for msg in ws:\n# \u5fc3\u8df3\u68c0\u6d4b\n# print(msg.type)\nif msg.type == WSMsgType.PING:\nif time.time() - t &lt; self._limitHeartbeatInterval: break\nt = time.time()\nawait ws.send_str(HeartBeat.PONG.value.decode())                \ncontinue\nif msg.type == WSMsgType.TEXT:\ntry:\nif msg.data:\nres:dict = ujson.loads(msg.data)\nif type(res)!=dict:break\n# \u5904\u7406\u8bf7\u6c42\nasyncio.create_task(process_request(create_UtRequest(res,res.get('id'),res.get('encrypt')),connection,self._register,self._sub_container,pool=self._pool))\ncontinue\nexcept:\nbreak\nself._sub_container.del_sub(connection.id)\nawait ws.close()\n</code></pre>"},{"location":"api/server/#utran.server.webserver.WebServer.handle_request","title":"<code>handle_request(request)</code>  <code>async</code>","text":"<p>\u5904\u7406web\u8bf7\u6c42,\u5206\u53d1http\u8bf7\u6c42\u548cwebsocket\u8bf7\u6c42</p> Source code in <code>utran\\server\\webserver.py</code> <pre><code>async def handle_request(self,request:web_request.BaseRequest):\n\"\"\"\u5904\u7406web\u8bf7\u6c42,\u5206\u53d1http\u8bf7\u6c42\u548cwebsocket\u8bf7\u6c42\"\"\"\n# \u9a8c\u8bc1\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\nauth_header = request.headers.get('Authorization')\nif auth_header:\nauth = self.__auth.decode(auth_header)\nelse:\nauth = None\nwname = request.headers.get('Upgrade')\nif wname and wname.lower() == 'websocket':\nws = WebSocketResponse(max_msg_size=self._dataMaxsize)            \nawait ws.prepare(request)\nif auth != self.__auth:\n# \u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25\nawait ws.send_str('\u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25!')\nreturn\nelse:\n#  \u8eab\u4efd\u9a8c\u8bc1\u6210\u529f\nawait ws.send_str('ok')\nawait self.websocket_handler(ws)\nelse:\nreturn await self.http_handler(request)\n</code></pre>"},{"location":"api/server/#utran.server.webserver.WebServer.http_handler","title":"<code>http_handler(request)</code>  <code>async</code>","text":"<p>\u5904\u7406web\u8bf7\u6c42</p> Source code in <code>utran\\server\\webserver.py</code> <pre><code>async def http_handler(self,request:web_request.BaseRequest):\n\"\"\"\u5904\u7406web\u8bf7\u6c42\"\"\" \nexecute_res:dict = dict()\nif request.method not in [ 'GET', 'POST']:\nexecute_res['state'] = 'failed'\nexecute_res['error'] = f'Method that is not allowed by the server'\nstatus = 500\nreturn HttpResponse(status=status,text=ujson.dumps(execute_res),content_type='application/json')\nif request.method == 'GET':\nrm:RMethod = self._register.methods_of_get.get(request.path)\nelse:\nrm:RMethod = self._register.methods_of_post.get(request.path)\n_ = request.query_string.split('&amp;')\nstatus = 200\nif rm:\ndicts = dict()\nfor p in _:\nif '=' in p:\nk,v = re.split(r\"=\", p, maxsplit=1)\ndicts[k.strip()]=v.strip()\nstate,result,error = await rm.execute(args=tuple(),dicts=dicts,pool=self._pool)\nexecute_res['state'] = state.value\nexecute_res['error'] = error\nexecute_res['result'] = result\nif state == UtState.FAILED:\nstatus=422\nelse:\nexecute_res['state'] = 'failed'\nexecute_res['error'] = f'Not found!'\nstatus = 400\nreturn HttpResponse(status=status,text=ujson.dumps(execute_res),content_type='application/json')\nif isinstance(result,HttpResponse):\nreturn result\nelse:\nreturn HttpResponse(status=status,text=ujson.dumps(execute_res),content_type='application/json')\n</code></pre>"},{"location":"api/server/#utran.server.webserver.WebServer.websocket_handler","title":"<code>websocket_handler(ws)</code>  <code>async</code>","text":"<p>\u5904\u7406websocket\u8bf7\u6c42</p> Source code in <code>utran\\server\\webserver.py</code> <pre><code>async def websocket_handler(self,ws:WebSocketResponse):\n\"\"\"\u5904\u7406websocket\u8bf7\u6c42\"\"\"\nconnection = ClientConnection(ws,self._dataEncrypt)\nt = float('-inf')        \nasync for msg in ws:\n# \u5fc3\u8df3\u68c0\u6d4b\n# print(msg.type)\nif msg.type == WSMsgType.PING:\nif time.time() - t &lt; self._limitHeartbeatInterval: break\nt = time.time()\nawait ws.send_str(HeartBeat.PONG.value.decode())                \ncontinue\nif msg.type == WSMsgType.TEXT:\ntry:\nif msg.data:\nres:dict = ujson.loads(msg.data)\nif type(res)!=dict:break\n# \u5904\u7406\u8bf7\u6c42\nasyncio.create_task(process_request(create_UtRequest(res,res.get('id'),res.get('encrypt')),connection,self._register,self._sub_container,pool=self._pool))\ncontinue\nexcept:\nbreak\nself._sub_container.del_sub(connection.id)\nawait ws.close()\n</code></pre>"},{"location":"api/server/#_3","title":"\u3010\u670d\u52a1\u7aef\u57fa\u7c7b\u3011","text":""},{"location":"api/server/#utran.server.baseServer.BaseServer","title":"<code>BaseServer</code>","text":"<p>         Bases: <code>ABC</code></p>"},{"location":"api/server/#utran.server.baseServer.BaseServer--_1","title":"\u670d\u52a1\u5668\u57fa\u7c7b","text":"<p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>\u4e3b\u673a\u5730\u5740</p> required <code>port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <code>register</code> <code>Register</code> <p>\u6ce8\u518c\u7c7b\uff0c\u7528\u4e8e\u6ce8\u518c\u672c\u5730\u7684\u53ef\u8c03\u7528\u51fd\u6570</p> <code>None</code> <code>sub_container</code> <code>SubscriptionContainer</code> <p>\u5b58\u653e\u8ba2\u9605\u8005\u548c\u8ba2\u9605\u8bdd\u9898\u7684\u5bb9\u5668</p> <code>None</code> <code>severName</code> <code>str</code> <p>\u670d\u52a1\u540d\u79f0</p> <code>'Server'</code> <code>dataMaxsize</code> <code>int</code> <p>\u4f20\u8f93\u6570\u636e\u652f\u6301\u7684\u6700\u5927\u5b57\u8282\u6570</p> <code>102400</code> <code>limitHeartbeatInterval</code> <code>int</code> <p>\u5fc3\u8df3\u68c0\u6d4b\u7684\u6781\u9650\u503c(\u5355\u4f4d\u4e3a:\u79d2)\u3002\u4e3a\u4e86\u9632\u6b62\u5fc3\u8df3\u653b\u51fb\uff0c\u9ed8\u8ba4\u4e3a1s,\u4e24\u6b21\u5fc3\u8df3\u7684\u95f4\u9694\u5c0f\u4e8e\u8be5\u503c\u5219\u4f1a\u65ad\u5f00\u8fde\u63a5\u3002</p> <code>1</code> <code>dataEncrypt</code> <code>bool</code> <p>\u662f\u5426\u52a0\u5bc6\u4f20\u8f93\u6570\u636e</p> <code>False</code> <code>workers</code> <code>int</code> <p>\u8fdb\u7a0b\u6570\u91cf</p> <code>0</code> <code>pool</code> <code>ProcessPoolExecutor</code> <p>\u8fdb\u7a0b\u6c60\u5bf9\u8c61</p> <code>None</code> <p>\u5907\u6ce8: \u5fc3\u8df3\u9700\u8981\u5ba2\u6237\u7aef\u4e3b\u52a8\u53d1\u8d77PING\uff0c\u670d\u52a1\u7aef\u4f1a\u88ab\u52a8\u54cd\u5e94PONG</p> Source code in <code>utran\\server\\baseServer.py</code> <pre><code>class BaseServer(ABC):\n\"\"\"# \u670d\u52a1\u5668\u57fa\u7c7b\n    Args:\n        host (str): \u4e3b\u673a\u5730\u5740\n        port (int): \u7aef\u53e3\u53f7\n        register (Register): \u6ce8\u518c\u7c7b\uff0c\u7528\u4e8e\u6ce8\u518c\u672c\u5730\u7684\u53ef\u8c03\u7528\u51fd\u6570\n        sub_container (SubscriptionContainer): \u5b58\u653e\u8ba2\u9605\u8005\u548c\u8ba2\u9605\u8bdd\u9898\u7684\u5bb9\u5668\n        severName (str): \u670d\u52a1\u540d\u79f0\n        dataMaxsize (int):  \u4f20\u8f93\u6570\u636e\u652f\u6301\u7684\u6700\u5927\u5b57\u8282\u6570\n        limitHeartbeatInterval (int): \u5fc3\u8df3\u68c0\u6d4b\u7684\u6781\u9650\u503c(\u5355\u4f4d\u4e3a:\u79d2)\u3002\u4e3a\u4e86\u9632\u6b62\u5fc3\u8df3\u653b\u51fb\uff0c\u9ed8\u8ba4\u4e3a1s,\u4e24\u6b21\u5fc3\u8df3\u7684\u95f4\u9694\u5c0f\u4e8e\u8be5\u503c\u5219\u4f1a\u65ad\u5f00\u8fde\u63a5\u3002\n        dataEncrypt: \u662f\u5426\u52a0\u5bc6\u4f20\u8f93\u6570\u636e\n        workers: \u8fdb\u7a0b\u6570\u91cf\n        pool: \u8fdb\u7a0b\u6c60\u5bf9\u8c61\n    \u5907\u6ce8: \u5fc3\u8df3\u9700\u8981\u5ba2\u6237\u7aef\u4e3b\u52a8\u53d1\u8d77PING\uff0c\u670d\u52a1\u7aef\u4f1a\u88ab\u52a8\u54cd\u5e94PONG\n    \"\"\"\n__slots__=('_host','_port','_register','_sub_container','_severName','_checkParams','_checkReturn',\n'_dataMaxsize','_dataEncrypt','_limitHeartbeatInterval','_server','_exitEvent',\n'_workers','_pool')\ndef __init__(\nself,\n*,\nregister: Register = None,\nsub_container: SubscriptionContainer = None,\nseverName: str = 'Server',\ncheckParams: bool = True,\ncheckReturn: bool = True,\ndataMaxsize: int = 102400,\nlimitHeartbeatInterval: int = 1,\ndataEncrypt: bool = False,\nworkers:int=0,\npool:ProcessPoolExecutor = None) -&gt; None:\nself._checkParams = checkParams\nself._checkReturn = checkReturn\nself._workers = workers\nself._pool = pool\nself._register = register or Register(checkParams=checkParams,checkReturn=checkReturn,workers=workers)\nself._sub_container = sub_container or SubscriptionContainer()\nself._severName = severName\nself._dataMaxsize = dataMaxsize\nself._dataEncrypt = dataEncrypt\nself._limitHeartbeatInterval = limitHeartbeatInterval\nself._exitEvent = asyncio.Event()\nself._server = None\n@abstractmethod\nasync def start(self,host: str,port: int,) -&gt; None:\n\"\"\"\u542f\u52a8\u670d\u52a1\u5668\"\"\"\nself._host = host\nself._port = port\nawait self._exitEvent.wait()\n@property\ndef register(self) -&gt; Register:\n\"\"\"# \u6ce8\u518c\n        Returns:\n            \u8fd4\u56de\u4e00\u4e2aRegister\u7c7b\u7684\u5b9e\u4f8b\n        \"\"\"\nreturn self._register\ndef exit(self):\n\"\"\"\u9000\u51fa\u7a0b\u5e8f\"\"\"\nself._exitEvent.set()\n</code></pre>"},{"location":"api/server/#utran.server.baseServer.BaseServer.register","title":"<code>register: Register</code>  <code>property</code>","text":""},{"location":"api/server/#utran.server.baseServer.BaseServer.register--_1","title":"\u6ce8\u518c","text":"<p>Returns:</p> Type Description <code>Register</code> <p>\u8fd4\u56de\u4e00\u4e2aRegister\u7c7b\u7684\u5b9e\u4f8b</p>"},{"location":"api/server/#utran.server.baseServer.BaseServer.exit","title":"<code>exit()</code>","text":"<p>\u9000\u51fa\u7a0b\u5e8f</p> Source code in <code>utran\\server\\baseServer.py</code> <pre><code>def exit(self):\n\"\"\"\u9000\u51fa\u7a0b\u5e8f\"\"\"\nself._exitEvent.set()\n</code></pre>"},{"location":"api/server/#utran.server.baseServer.BaseServer.start","title":"<code>start(host, port)</code>  <code>async</code> <code>abstractmethod</code>","text":"<p>\u542f\u52a8\u670d\u52a1\u5668</p> Source code in <code>utran\\server\\baseServer.py</code> <pre><code>@abstractmethod\nasync def start(self,host: str,port: int,) -&gt; None:\n\"\"\"\u542f\u52a8\u670d\u52a1\u5668\"\"\"\nself._host = host\nself._port = port\nawait self._exitEvent.wait()\n</code></pre>"},{"location":"api/utils/","title":"\u901a\u7528\u6a21\u5757","text":""},{"location":"api/utils/#utran.utils.asyncfn_runner","title":"<code>asyncfn_runner(fn, *args, **kwds)</code>","text":"<p>\u5b50\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4e2d\u7684\u5f02\u6b65\u6267\u884c\u5668</p> Source code in <code>utran\\utils.py</code> <pre><code>def asyncfn_runner(fn:Union[Callable,Coroutine],*args,**kwds):\n\"\"\"\u5b50\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u4e2d\u7684\u5f02\u6b65\u6267\u884c\u5668\"\"\"\nif asyncio.iscoroutinefunction(fn):\nreturn asyncio.run(fn(*args,**kwds))\nelif asyncio.iscoroutine(fn):\nreturn asyncio.run(fn)\n</code></pre>"},{"location":"api/utils/#utran.utils.pack_data2_utran","title":"<code>pack_data2_utran(id, name, message, encrypt=False)</code>","text":"<p>\u6839\u636eutran\u534f\u8bae\u5c06\u8981\u53d1\u9001\u7684\u6d88\u606f\u6253\u5305\u6210\u4e8c\u8fdb\u5236\u683c\u5f0f</p> Utran\u534f\u8bae <pre><code>rpc/subscribe/unsubscribe/publish\nlength:xx\nencrypt:0/1\nid:1\n\nmessage_json\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>\u6574\u6570\u7c7b\u578b\u7684\u503c</p> required <code>name</code> <code>str</code> <p>\u8bf7\u6c42\u7c7b\u578b\u7684\u540d\u79f0</p> required <code>message</code> <code>Union[dict, bytes]</code> <p>\u8981\u53d1\u9001\u7684\u6d88\u606f\uff08dict\u7c7b\u578b\uff09 \u6216\u8005 bytes</p> required <code>encrypt</code> <code>bool</code> <p>\u662f\u5426\u52a0\u5bc6\u6570\u636e</p> <code>False</code> <p>Returns:</p> Type Description <code>bytes</code> <p>\u6253\u5305\u540e\u7684\u4e8c\u8fdb\u5236\u6570\u636e</p> Source code in <code>utran\\utils.py</code> <pre><code>def pack_data2_utran(id:int,name:str,message:Union[dict,bytes],encrypt:bool=False)-&gt;bytes:\n\"\"\"\n    \u6839\u636eutran\u534f\u8bae\u5c06\u8981\u53d1\u9001\u7684\u6d88\u606f\u6253\u5305\u6210\u4e8c\u8fdb\u5236\u683c\u5f0f\n    Utran\u534f\u8bae:\n        ```\n        rpc/subscribe/unsubscribe/publish\n        length:xx\n        encrypt:0/1\n        id:1\n        message_json\n        ```\n    Args:\n        id: \u6574\u6570\u7c7b\u578b\u7684\u503c\n        name: \u8bf7\u6c42\u7c7b\u578b\u7684\u540d\u79f0\n        message: \u8981\u53d1\u9001\u7684\u6d88\u606f\uff08dict\u7c7b\u578b\uff09 \u6216\u8005 bytes\n        encrypt: \u662f\u5426\u52a0\u5bc6\u6570\u636e\n    Returns:\n        \u6253\u5305\u540e\u7684\u4e8c\u8fdb\u5236\u6570\u636e\n    \"\"\"\nif type(message) == dict:\nmessage_json = ujson.dumps(message).encode('utf-8')\nelif type(message) != bytes:\nraise ValueError('Packaging error,The message must be a dict or bytes ')\nif encrypt:\n# \u52a0\u5bc6\u7b97\u6cd5\u8fd8\u672a\u5b9e\u73b0\npass\nmessage_length = len(message_json)\n# \u6253\u5305\u6570\u636e\ndata = b''\ndata += name.encode('utf-8') + b'\\n'\ndata += f'length:{message_length}\\n'.encode('utf-8')\ndata += f'encrypt:{int(encrypt)}\\n'.encode('utf-8')\ndata += f'id:{id}\\n'.encode('utf-8')\ndata += b'\\r\\n'\ndata += message_json\nreturn data\n</code></pre>"},{"location":"api/utils/#utran.utils.parameter_convert_dict","title":"<code>parameter_convert_dict(fun, *args, **kwds)</code>","text":"<p>\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u8f6c\u6210\u7eaf\u5b57\u5178\u53c2\u6570</p> Source code in <code>utran\\utils.py</code> <pre><code>def parameter_convert_dict(fun,*args,**kwds):\n\"\"\"\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u8f6c\u6210\u7eaf\u5b57\u5178\u53c2\u6570\"\"\"\nreturn dict(parameter_serialization(fun,*args,**kwds))\n</code></pre>"},{"location":"api/utils/#utran.utils.parameter_convert_list","title":"<code>parameter_convert_list(fun, *args, **kwds)</code>","text":"<p>\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u8f6c\u6210\u7eaf\u5217\u8868\u53c2\u6570</p> Source code in <code>utran\\utils.py</code> <pre><code>def parameter_convert_list(fun,*args,**kwds):\n\"\"\"\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u8f6c\u6210\u7eaf\u5217\u8868\u53c2\u6570\"\"\"\nreturn [v for k,v in parameter_serialization(fun,*args,**kwds)]\n</code></pre>"},{"location":"api/utils/#utran.utils.parameter_serialization","title":"<code>parameter_serialization(fun, *args, **kwds)</code>","text":"<p>\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\u5e8f\u5217\u5316</p> Source code in <code>utran\\utils.py</code> <pre><code>def parameter_serialization(fun,*args,**kwds):\n\"\"\"\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\u5e8f\u5217\u5316\"\"\"\nparams:tuple = tuple(inspect.signature(fun).parameters.keys())\ndefault_values:tuple= tuple([i.default for i in tuple(inspect.signature(fun).parameters.values()) if i.default is not inspect._empty])\nsp = inspect.getfullargspec(fun)\nvarargs:str = sp.varargs\nvarkw:str = sp.varkw\nargs = list(args)\n_params:list = list(params)\nif varargs in params: _params.remove(varargs)\nif varkw in params: _params.remove(varkw)\n_default:dict = dict(zip(_params[len(default_values)+1:],default_values))\ns = len(default_values)\nif default_values:\nif varkw:\ns+=1\nparams_ = params[:s+1]        \nelse:\nparams_ = params\nres_ = []    \nfor i in range(len(params_)):\nn = params_[i]\nif n==varargs:\nres_.append((n,args[i:]))\nbreak\nif i&lt;len(args):\nres_.append((n,args[i]))\nelse:\nif n in kwds:\nres_.append((n,kwds.pop(n)))\nelse:\nraise TypeError(f'{fun.__name__}() missing 1 required positional argument: \"{n}\"')\n_res = []\nfor n in params[-s:]:\nif n == varkw:\n_res.append((n,kwds))\nkwds = None\nbreak\nif n in kwds:\n_res.append((n,kwds.pop(n)))\nelif _default:\n_res.append((n,_default.get(n)))\nif kwds:\n# \u5173\u952e\u5b57\u53c2\u6570\u8fc7\u591a\nkeys = \",\".join(kwds.keys())\nraise TypeError(f'{fun.__name__}() got an unexpected keyword argument \"{keys}\".')\nres = res_+_res\nif len(params)!=len(res):\n# \u53c2\u6570\u6570\u91cf\u4e0d\u6b63\u786e\nraise TypeError(f'{fun.__name__}() The number of parameters is incorrect.')\nreturn res_+_res\n</code></pre>"},{"location":"api/utils/#utran.utils.parse_utran_uri","title":"<code>parse_utran_uri(uri)</code>","text":""},{"location":"api/utils/#utran.utils.parse_utran_uri--uri","title":"\u89e3\u6790uri","text":"<p>Returns:</p> Type Description <code>tuple[str, int]</code> <p>\u8fd4\u56dehost\u548cport</p> Source code in <code>utran\\utils.py</code> <pre><code>def parse_utran_uri(uri:str)-&gt;tuple[str, int]:\n\"\"\"#\u89e3\u6790uri\n    Returns:\n        \u8fd4\u56dehost\u548cport\n    \"\"\"\nresult = re.search(r\"//([^:/]+):(\\d+)\", uri)\nif result:\nhost = result.group(1)\nport = result.group(2)\nreturn host, port\nelse:\nraise ValueError(f'Uri error:{uri}')\n</code></pre>"},{"location":"api/utils/#utran.utils.unpack_data2_utran","title":"<code>unpack_data2_utran(buffer=b'')</code>","text":"<p>\u6839\u636eutran\u534f\u8bae\u4ece\u63a5\u6536\u5230\u7684\u5b57\u8282\u6d41\u4e2d\u89e3\u6790\u51fa\u5b8c\u6574\u7684\u6d88\u606f</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>bytes</code> <p>\u5b57\u8282\u6570\u636e</p> <code>b''</code> <p>Returns:      msgType (str):\u6d88\u606f\u7c7b\u578b     header (dict):\u5934\u90e8     residual_datasize (int):\u672a\u8bfb\u53d6\u5b57\u8282\u6570     msg:\u5269\u4f59\u5b57\u8282</p> Utran\u534f\u8bae <pre><code>rpc/subscribe/unsubscribe/publish/multicall\nlength:xx\nencrypt:0/1\nmessage_json\n</code></pre> Source code in <code>utran\\utils.py</code> <pre><code>def unpack_data2_utran(buffer:bytes=b'')-&gt;tuple[str,dict,int,bytes]:\n\"\"\"\n    \u6839\u636eutran\u534f\u8bae\u4ece\u63a5\u6536\u5230\u7684\u5b57\u8282\u6d41\u4e2d\u89e3\u6790\u51fa\u5b8c\u6574\u7684\u6d88\u606f\n    Args:\n        buffer: \u5b57\u8282\u6570\u636e\n    Returns: \n        msgType (str):\u6d88\u606f\u7c7b\u578b\n        header (dict):\u5934\u90e8\n        residual_datasize (int):\u672a\u8bfb\u53d6\u5b57\u8282\u6570\n        msg:\u5269\u4f59\u5b57\u8282\n    Utran\u534f\u8bae:\n        ```\n        rpc/subscribe/unsubscribe/publish/multicall\n        length:xx\n        encrypt:0/1\n        message_json\n        ```\n    \"\"\"\nif b'length' not in buffer or b'id' not in buffer:\nraise ValueError('The utran protocol is invalid')\ntry:\nhead,msg = buffer.split(b'\\r\\n')\nhead = head.split(b'\\n')[:-1]\nmsgType,header = (head[0],head[1:])\nexcept:\nraise ValueError('The utran protocol is invalid')\nif msgType not in [b'rpc',b'subscribe',b'unsubscribe',b'publish',b'multicall']:\nraise ValueError('The utran protocol is invalid')\ntry:\nmsgType = msgType.decode('utf-8')\nheader = dict([i.decode('utf-8').split(':') for i in header])\nheader['encrypt'] = bool(int(header.get('encrypt')))\nheader['length'] = int(header.get('length'))\nheader['id'] = int(header.get('id'))        \nexcept:\nraise ValueError('The utran protocol is invalid')\nresidual_datasize = header['length'] - len(msg)\nreturn msgType,header,residual_datasize,msg\n</code></pre>"}]}